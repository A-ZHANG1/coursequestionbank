c
@search
@current_user.collections.where(:name => "Intro Rails questions")
@current_user.collections.where(:name => @search)
@current_user.collections
@current_user.collections.where(:name => @search)
Collection.where(:name => @search, :is_public => true)
@collection_by_name
@search
@collections
n
c
@collections
c
@collectionsc
@collection
@collections
n
@search
n
params
@search
c
@search
c
@collec
@collec = @current_user.collections.where(:name => @search) + @current_user.collections.where(:name => @search)
@current_user.collections.where(:name => @search)
@current_user.collections.where(:name => @search, :is_public => false)
@current_user.collections.where(:name => @search:, is_public => false)
@current_user.collections.where(:name => @search: is_public => false)
@current_user.collections.where(:name => @search)
@current_user.collections
@current_user.collections.where(:name => @search, :is_public => false))
@search
@collections
n
@collections
c
@collections + @current_user.collections
@collections
n
@current_user.collections
@collections2
@collections2 = Collection.where(:description => @search, :belongs_to => @current_user)
@current_user
@curent_user
Collection.where(:description => @search, :belongs_to => @current_user)
params
c
request["PATH_INFO"]
request[PATH_INFO]
request["PATH_INFO"]
request
URI[URI]
URI
url
session
URI
uri
params
c
Collection.find_by_name("Java").empty?
Collection.find_by_name("JAva").empty?
Collection.find_by_name(@search).empty?
Collection.find_by_name(@search)
@search
Collection.public.empty?
Collection.public
@collection_by_description.empty?
@collection_by_description
@collections.empty?
@collections.each
@collections
c
n
c
@collections.empty?
@collections
c
params
@search
c
@search
c
@collections
@collection
c
q
Collection.find_by_name("Intro Rails questions Public")
Collection.find_by_name(params[:name])
params[:name]
params
c
@current_user.respond_to?(:collections)
@current_user
c
@collections
q
c
user.instructor?
user
exit()
params
exit()
eixt()
"provider"
params
c
n
User.dev_users
exit()
User.dev_users
exit()
n
User.dev_users
exit()
User.dev_users
exit()
User.dev_users
User.all
User
c
n
c
username
c
username
c
n
c
n
Problem.search
Problem.count
problems
Problem.count
Problem
n
c
n
c
@current_user
c
n
provider
username
c
n
q
exit
provider
username
c
n
c
q
whitelist
n
q
n
q
n
c
q
user
