# Logfile created on 2016-11-16 02:08:45 +0000 by logger.rb/53141
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"569da4c1-9846-4952-9c23-6957b064258a", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"87ca40b1-c95d-457e-b3ee-0538b84f31fb", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3253edfc-954e-4d04-a5c6-562a3c9e4c56", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"03870a7d-fce6-4041-b761-50a328f774d9", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c594074e-5527-4631-85a9-11d3920f280d", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"900ae16b-b2fd-416f-ac19-5a3c90a40622", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"900ae16b-b2fd-416f-ac19-5a3c90a40622", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"900ae16b-b2fd-416f-ac19-5a3c90a40622", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"84fdda54-39d4-4ae9-845c-acfd82813f46", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c22bcbed-0c4e-42de-8cb4-31b305a9c351", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fca0272d-dbe3-40ac-a2b8-8d1f175ef399", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"778e09a3-f23c-4f1c-9ebe-84b537249c34", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"778e09a3-f23c-4f1c-9ebe-84b537249c34", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"bd955e6d-390d-47bd-badd-02b4641d2e56", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"bd955e6d-390d-47bd-badd-02b4641d2e56", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"bd955e6d-390d-47bd-badd-02b4641d2e56", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c04c4187-f808-4a67-b89e-834c60438bd8", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c04c4187-f808-4a67-b89e-834c60438bd8", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9de49a7d-95c0-402a-add7-97d6a031bec8", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9de49a7d-95c0-402a-add7-97d6a031bec8", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9de49a7d-95c0-402a-add7-97d6a031bec8", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"573a3f6d-0451-4dbd-b636-7c1097fd9350", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f277923-24fe-4e19-8a7f-d9fbed5f2e24", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9bbc8dfe-d19c-4cb4-8ebf-749794c9a355", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"01d78ed4-c7b4-4a05-a268-a8c0ad76397a", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5eb57097-919c-4507-a05b-c6813be92867", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5eb57097-919c-4507-a05b-c6813be92867", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"374d16fe-d3b0-4251-a3ed-3a86c9486138", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"374d16fe-d3b0-4251-a3ed-3a86c9486138", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f96290bf-77b1-4212-bcf7-f46710abe735", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a4127360-4983-429b-be6c-856c6905368d", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3b680083-b89a-4bc7-b719-7ebf2c4cc4e2", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"91d0c29e-fd01-4e80-9f65-25001560727b", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b95029d6-20e4-431e-9f0b-a585110076bd", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b95029d6-20e4-431e-9f0b-a585110076bd", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c10d23c3-6d15-44ea-8078-6f9a1859fa07", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"73a115d2-a98e-4427-829a-27df8a1d4d32", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"00ef879c-0372-4d84-a5f9-61976c9bd0ca", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b6508311-4d5b-4503-b945-c89d7a2769e1", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b6508311-4d5b-4503-b945-c89d7a2769e1", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b6508311-4d5b-4503-b945-c89d7a2769e1", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7b2d7b66-33fb-4104-a5fc-3aad0a210e14", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1bdcf974-416a-4c86-8274-5270b5d1a47a", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"af51d93d-eb75-4b78-b0ea-de2f2a4264b1", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a8f9e777-6d7d-4400-9a98-c4ea3e018ccb", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"20ee05b0-cec4-4811-ba63-5385aa787edb", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"569da4c1-9846-4952-9c23-6957b064258a", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"87ca40b1-c95d-457e-b3ee-0538b84f31fb", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3253edfc-954e-4d04-a5c6-562a3c9e4c56", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"03870a7d-fce6-4041-b761-50a328f774d9", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c594074e-5527-4631-85a9-11d3920f280d", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"900ae16b-b2fd-416f-ac19-5a3c90a40622", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"84fdda54-39d4-4ae9-845c-acfd82813f46", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c22bcbed-0c4e-42de-8cb4-31b305a9c351", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fca0272d-dbe3-40ac-a2b8-8d1f175ef399", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"778e09a3-f23c-4f1c-9ebe-84b537249c34", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"bd955e6d-390d-47bd-badd-02b4641d2e56", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c04c4187-f808-4a67-b89e-834c60438bd8", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9de49a7d-95c0-402a-add7-97d6a031bec8", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"573a3f6d-0451-4dbd-b636-7c1097fd9350", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f277923-24fe-4e19-8a7f-d9fbed5f2e24", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9bbc8dfe-d19c-4cb4-8ebf-749794c9a355", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"01d78ed4-c7b4-4a05-a268-a8c0ad76397a", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5eb57097-919c-4507-a05b-c6813be92867", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"374d16fe-d3b0-4251-a3ed-3a86c9486138", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f96290bf-77b1-4212-bcf7-f46710abe735", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a4127360-4983-429b-be6c-856c6905368d", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3b680083-b89a-4bc7-b719-7ebf2c4cc4e2", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"91d0c29e-fd01-4e80-9f65-25001560727b", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b95029d6-20e4-431e-9f0b-a585110076bd", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c10d23c3-6d15-44ea-8078-6f9a1859fa07", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"73a115d2-a98e-4427-829a-27df8a1d4d32", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"00ef879c-0372-4d84-a5f9-61976c9bd0ca", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b6508311-4d5b-4503-b945-c89d7a2769e1", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7b2d7b66-33fb-4104-a5fc-3aad0a210e14", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1bdcf974-416a-4c86-8274-5270b5d1a47a", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"af51d93d-eb75-4b78-b0ea-de2f2a4264b1", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a8f9e777-6d7d-4400-9a98-c4ea3e018ccb", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"20ee05b0-cec4-4811-ba63-5385aa787edb", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"162ddca5-fed1-4b0d-bdf5-dc2bf7c3fe0d", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"418288fe-10de-4a2c-8c78-9ee6c58a464f", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7069ff0c-6889-4a8a-9319-71f5b7736beb", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"747f0e48-05ee-47ad-ab9d-ba7ff014a229", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"413ac3a6-1f65-4b97-850e-43584d81cc1e", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8f0ad862-cad1-461a-b517-f1b51a5d81ab", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8f0ad862-cad1-461a-b517-f1b51a5d81ab", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8f0ad862-cad1-461a-b517-f1b51a5d81ab", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"05d7d512-d32d-4d85-af50-2ad3c85d13b0", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"537eece2-f8ab-4077-8cd1-3aa67a4969ed", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"df8ab57a-25f0-4250-8ebb-dd3f04251b54", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"727f211d-fcdd-4af0-9e13-8c818c2ac4d8", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"727f211d-fcdd-4af0-9e13-8c818c2ac4d8", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8a54c55e-7cb4-48b0-86ae-998fcd73cd4b", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8a54c55e-7cb4-48b0-86ae-998fcd73cd4b", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8a54c55e-7cb4-48b0-86ae-998fcd73cd4b", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"afefee84-f5da-4eee-b9c6-612cd2ba6179", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"afefee84-f5da-4eee-b9c6-612cd2ba6179", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"849e7bf1-9f19-4785-875a-9b6b0b106d78", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"849e7bf1-9f19-4785-875a-9b6b0b106d78", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"849e7bf1-9f19-4785-875a-9b6b0b106d78", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"27fc6c80-a31c-461f-b1cb-6c7ccee2e889", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5dc39464-ff06-484d-8648-0b4b7755c941", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8a27bbf9-000a-4fa4-b5ec-9c9a3d8a332d", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"73f9fc25-5589-496f-aaae-91b20e60ffcb", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5a4ef454-65a6-4556-b4b0-a2e4682e79d6", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5a4ef454-65a6-4556-b4b0-a2e4682e79d6", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"368efcf4-ad23-4fa8-91ad-4d096a7970ce", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"368efcf4-ad23-4fa8-91ad-4d096a7970ce", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"94bcfe07-143b-4378-9dce-06703870cf4b", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f5940b47-9283-4b2f-a4a4-156d45f0e150", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"983f0687-7159-4e20-a864-d4099f15371e", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"26a4d937-5116-4e3a-8749-0c1b34eae8d7", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"73b38782-d7ce-4114-9110-b9fb2d419bd7", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"73b38782-d7ce-4114-9110-b9fb2d419bd7", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"82a04443-a80d-400a-a6da-db4218fe9e51", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"bcf854ac-bda6-4eeb-9f20-1008824371e8", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7a87c440-246f-4906-907f-bdefe1b5a4c5", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6e33f8f5-584a-417c-bdaf-da2b50d15e99", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6e33f8f5-584a-417c-bdaf-da2b50d15e99", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6e33f8f5-584a-417c-bdaf-da2b50d15e99", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2e295c2f-04c2-45e6-9545-c5e12c30c3c5", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c6b5f69a-7155-4cf7-8a7f-869136e20070", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9d796d1c-c0ea-4fe6-b606-d3552a1a9e94", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e62c063d-25e9-48b7-80b9-2442b1091497", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"49b37002-0569-443b-add6-6ab758a61c27", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"162ddca5-fed1-4b0d-bdf5-dc2bf7c3fe0d", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"418288fe-10de-4a2c-8c78-9ee6c58a464f", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7069ff0c-6889-4a8a-9319-71f5b7736beb", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"747f0e48-05ee-47ad-ab9d-ba7ff014a229", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"413ac3a6-1f65-4b97-850e-43584d81cc1e", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8f0ad862-cad1-461a-b517-f1b51a5d81ab", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"05d7d512-d32d-4d85-af50-2ad3c85d13b0", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"537eece2-f8ab-4077-8cd1-3aa67a4969ed", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"df8ab57a-25f0-4250-8ebb-dd3f04251b54", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"727f211d-fcdd-4af0-9e13-8c818c2ac4d8", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8a54c55e-7cb4-48b0-86ae-998fcd73cd4b", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"afefee84-f5da-4eee-b9c6-612cd2ba6179", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"849e7bf1-9f19-4785-875a-9b6b0b106d78", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"27fc6c80-a31c-461f-b1cb-6c7ccee2e889", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5dc39464-ff06-484d-8648-0b4b7755c941", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8a27bbf9-000a-4fa4-b5ec-9c9a3d8a332d", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"73f9fc25-5589-496f-aaae-91b20e60ffcb", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5a4ef454-65a6-4556-b4b0-a2e4682e79d6", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"368efcf4-ad23-4fa8-91ad-4d096a7970ce", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"94bcfe07-143b-4378-9dce-06703870cf4b", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f5940b47-9283-4b2f-a4a4-156d45f0e150", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"983f0687-7159-4e20-a864-d4099f15371e", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"26a4d937-5116-4e3a-8749-0c1b34eae8d7", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"73b38782-d7ce-4114-9110-b9fb2d419bd7", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"82a04443-a80d-400a-a6da-db4218fe9e51", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"bcf854ac-bda6-4eeb-9f20-1008824371e8", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7a87c440-246f-4906-907f-bdefe1b5a4c5", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6e33f8f5-584a-417c-bdaf-da2b50d15e99", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2e295c2f-04c2-45e6-9545-c5e12c30c3c5", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c6b5f69a-7155-4cf7-8a7f-869136e20070", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9d796d1c-c0ea-4fe6-b606-d3552a1a9e94", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e62c063d-25e9-48b7-80b9-2442b1091497", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"49b37002-0569-443b-add6-6ab758a61c27", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e85c7d34-e0fb-4ef8-bc55-c12444e14567", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"29dd59ac-2325-491b-b897-231d2fb2dcef", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"914672d5-aa0a-4258-8b97-8a2cc31c4aa0", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fd94fec2-df56-43f8-9088-2cece6590734", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c7aa6b41-b414-4456-ae83-a499a2b5411a", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"977a9e45-5577-41bd-af6b-2d2b911a79e1", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"977a9e45-5577-41bd-af6b-2d2b911a79e1", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"977a9e45-5577-41bd-af6b-2d2b911a79e1", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"18e227a6-f65f-4ae2-af26-daa9e567e9b9", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c912f94b-4876-400a-8909-34c239b01705", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2eb1a4ec-2ecd-4888-be6a-853a7c7bd947", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e7f0e80f-7d3b-4339-9964-0b1d35f9fe59", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e7f0e80f-7d3b-4339-9964-0b1d35f9fe59", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a206435b-725a-4fd0-817f-e9ee0a88a75b", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a206435b-725a-4fd0-817f-e9ee0a88a75b", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a206435b-725a-4fd0-817f-e9ee0a88a75b", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ccb2d355-576c-4b4a-adce-5707861e88a3", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ccb2d355-576c-4b4a-adce-5707861e88a3", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"405600e9-4a1a-47a2-94eb-dcc4b9ca2b20", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"405600e9-4a1a-47a2-94eb-dcc4b9ca2b20", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"405600e9-4a1a-47a2-94eb-dcc4b9ca2b20", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0a30d982-b2c5-4697-ae20-07b8cf79ffe9", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6ec6bf83-ff5e-4849-b6b7-3af1d972efe5", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ffcba241-a1bd-40ba-94cb-de553c813dc0", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f33ae75a-4d3b-47f1-9a2c-32bf6c90d3f9", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"09e44abc-2b7e-4a35-8e34-e70dd6dba982", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"09e44abc-2b7e-4a35-8e34-e70dd6dba982", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1017f90a-ffea-43b7-9de8-606b42f125fc", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1017f90a-ffea-43b7-9de8-606b42f125fc", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1d461853-6264-43a4-9608-f0ac2fe8f49f", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"48e07a74-ff93-4961-a429-e3b4f4b8b900", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"da3ed59f-696a-4b6e-90ef-944fd706c466", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e1bae7a8-3aba-4dc0-aa4a-a55c0f39bfa3", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4f21a65f-fa19-4ecc-be16-2f8c76b1971f", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4f21a65f-fa19-4ecc-be16-2f8c76b1971f", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c3319f81-0ff7-4b63-b30e-6394c66b7bb3", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9792f102-9e1f-4b69-aeac-99d83406e1d0", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4f8b34e8-36d6-4951-a464-8d196ec828db", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9ac71286-c173-4584-8f2f-21cbf248987c", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9ac71286-c173-4584-8f2f-21cbf248987c", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9ac71286-c173-4584-8f2f-21cbf248987c", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d6c9e19f-6bb0-4bb1-bcad-7dcf444b5e60", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6cf5c288-b92b-4c5e-89eb-fe84c753c7e4", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"003e623c-52b9-4ba1-8932-f8b7277ccf5a", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c77e76ed-6ec0-49df-8f3f-4fbaf309109a", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4fc32ed6-a062-46b4-8ad8-8cc8ab465d93", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e85c7d34-e0fb-4ef8-bc55-c12444e14567", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"29dd59ac-2325-491b-b897-231d2fb2dcef", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"914672d5-aa0a-4258-8b97-8a2cc31c4aa0", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fd94fec2-df56-43f8-9088-2cece6590734", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c7aa6b41-b414-4456-ae83-a499a2b5411a", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"977a9e45-5577-41bd-af6b-2d2b911a79e1", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"18e227a6-f65f-4ae2-af26-daa9e567e9b9", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c912f94b-4876-400a-8909-34c239b01705", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2eb1a4ec-2ecd-4888-be6a-853a7c7bd947", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e7f0e80f-7d3b-4339-9964-0b1d35f9fe59", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a206435b-725a-4fd0-817f-e9ee0a88a75b", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ccb2d355-576c-4b4a-adce-5707861e88a3", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"405600e9-4a1a-47a2-94eb-dcc4b9ca2b20", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0a30d982-b2c5-4697-ae20-07b8cf79ffe9", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6ec6bf83-ff5e-4849-b6b7-3af1d972efe5", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ffcba241-a1bd-40ba-94cb-de553c813dc0", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f33ae75a-4d3b-47f1-9a2c-32bf6c90d3f9", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"09e44abc-2b7e-4a35-8e34-e70dd6dba982", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1017f90a-ffea-43b7-9de8-606b42f125fc", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1d461853-6264-43a4-9608-f0ac2fe8f49f", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"48e07a74-ff93-4961-a429-e3b4f4b8b900", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"da3ed59f-696a-4b6e-90ef-944fd706c466", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e1bae7a8-3aba-4dc0-aa4a-a55c0f39bfa3", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4f21a65f-fa19-4ecc-be16-2f8c76b1971f", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c3319f81-0ff7-4b63-b30e-6394c66b7bb3", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9792f102-9e1f-4b69-aeac-99d83406e1d0", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4f8b34e8-36d6-4951-a464-8d196ec828db", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9ac71286-c173-4584-8f2f-21cbf248987c", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d6c9e19f-6bb0-4bb1-bcad-7dcf444b5e60", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6cf5c288-b92b-4c5e-89eb-fe84c753c7e4", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"003e623c-52b9-4ba1-8932-f8b7277ccf5a", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c77e76ed-6ec0-49df-8f3f-4fbaf309109a", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4fc32ed6-a062-46b4-8ad8-8cc8ab465d93", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8aa132a0-7d22-4879-818a-740bae083ef9", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dd380e03-b186-4135-b277-a8fa00e15c1c", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"672e08b2-3b27-4646-9fa0-1d01e3573220", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"687d465b-2ab0-4137-8267-4ecbde763876", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"48dff0ea-68f2-4612-ab48-577aa61dd3b1", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1dad5d89-e455-4664-a7ee-79155a41c4bb", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1dad5d89-e455-4664-a7ee-79155a41c4bb", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1dad5d89-e455-4664-a7ee-79155a41c4bb", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"575ce0cd-92bb-4067-81d6-79e0dcdafd10", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e294bf4a-9964-4dcd-8e53-5177a9053de0", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38e72dd2-95a0-4497-b0e9-6e7638884c13", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f5f037d-d0c0-49b7-b4c3-0217a5b170d3", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f5f037d-d0c0-49b7-b4c3-0217a5b170d3", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f680a893-5cb9-477c-9355-6d95d0c67879", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f680a893-5cb9-477c-9355-6d95d0c67879", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f680a893-5cb9-477c-9355-6d95d0c67879", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"610faafa-7339-44e8-9667-c788dd9c7ffd", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"610faafa-7339-44e8-9667-c788dd9c7ffd", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5cd4ba6a-8776-4390-8599-0373a4169eab", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5cd4ba6a-8776-4390-8599-0373a4169eab", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5cd4ba6a-8776-4390-8599-0373a4169eab", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b2dcc7e9-111f-4c74-9293-9407027719c6", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8bd1dfa8-f807-4fdc-9bcf-649937b4a24a", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b683e5b3-2602-44e0-85c7-39b0e85fd4b2", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5037c692-a757-4150-81a2-2687a0fe90e8", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"672764dc-d014-4e3c-9567-8336e6ab1a95", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"672764dc-d014-4e3c-9567-8336e6ab1a95", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"adbe787a-a596-4586-a8a6-0d9dbd65d6e9", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"adbe787a-a596-4586-a8a6-0d9dbd65d6e9", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9278a0c4-b14f-4b2c-a23d-696596c761f3", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e26fd5f3-2d16-4cbd-a19a-defc7e008eac", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6aa34463-7575-42d0-af51-521c58a93f5a", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"72e18c70-7443-46ce-8963-cc6e7dabea71", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d6532b78-7ec8-46ca-9081-495ddea51a48", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d6532b78-7ec8-46ca-9081-495ddea51a48", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d9dbf16e-290b-406f-bc79-19cbbcf1df08", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"863b671a-6d75-4806-95db-fc4aa5773621", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4d293f4a-e062-4d6d-aaad-e4d4ccec93ff", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"78279af3-3ce2-4449-92ed-ab952762b518", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"78279af3-3ce2-4449-92ed-ab952762b518", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"78279af3-3ce2-4449-92ed-ab952762b518", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"672ffd26-6cfc-4110-98c5-fb5689e8a0c8", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"771d6695-1589-4bae-b9dd-e55bf870474c", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"57fb38e8-4214-4551-9e68-0e0f25fd9fcb", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"32f44808-3816-4e5a-a5e9-c654a92acea1", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5d48fdad-ae30-4350-8755-2df3ded5b6f6", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8aa132a0-7d22-4879-818a-740bae083ef9", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dd380e03-b186-4135-b277-a8fa00e15c1c", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"672e08b2-3b27-4646-9fa0-1d01e3573220", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"687d465b-2ab0-4137-8267-4ecbde763876", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"48dff0ea-68f2-4612-ab48-577aa61dd3b1", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1dad5d89-e455-4664-a7ee-79155a41c4bb", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"575ce0cd-92bb-4067-81d6-79e0dcdafd10", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e294bf4a-9964-4dcd-8e53-5177a9053de0", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38e72dd2-95a0-4497-b0e9-6e7638884c13", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f5f037d-d0c0-49b7-b4c3-0217a5b170d3", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f680a893-5cb9-477c-9355-6d95d0c67879", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"610faafa-7339-44e8-9667-c788dd9c7ffd", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5cd4ba6a-8776-4390-8599-0373a4169eab", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b2dcc7e9-111f-4c74-9293-9407027719c6", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8bd1dfa8-f807-4fdc-9bcf-649937b4a24a", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b683e5b3-2602-44e0-85c7-39b0e85fd4b2", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5037c692-a757-4150-81a2-2687a0fe90e8", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"672764dc-d014-4e3c-9567-8336e6ab1a95", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"adbe787a-a596-4586-a8a6-0d9dbd65d6e9", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9278a0c4-b14f-4b2c-a23d-696596c761f3", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e26fd5f3-2d16-4cbd-a19a-defc7e008eac", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6aa34463-7575-42d0-af51-521c58a93f5a", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"72e18c70-7443-46ce-8963-cc6e7dabea71", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d6532b78-7ec8-46ca-9081-495ddea51a48", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d9dbf16e-290b-406f-bc79-19cbbcf1df08", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"863b671a-6d75-4806-95db-fc4aa5773621", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4d293f4a-e062-4d6d-aaad-e4d4ccec93ff", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"78279af3-3ce2-4449-92ed-ab952762b518", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"672ffd26-6cfc-4110-98c5-fb5689e8a0c8", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"771d6695-1589-4bae-b9dd-e55bf870474c", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"57fb38e8-4214-4551-9e68-0e0f25fd9fcb", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"32f44808-3816-4e5a-a5e9-c654a92acea1", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5d48fdad-ae30-4350-8755-2df3ded5b6f6", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b4205fcd-599e-4598-a67e-b58e6f2d4314", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fd0670b8-b711-4979-b90c-fe65b28e2d86", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"77a38494-fdd5-4f72-8478-a069357389bb", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d2fcc8a4-22cc-4d0a-8c33-e2e4a30cf40d", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"870f726a-766c-4dff-ac8c-9bed95e4f4d4", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dad753ba-a0bd-4727-a1fb-3aa52f033095", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dad753ba-a0bd-4727-a1fb-3aa52f033095", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dad753ba-a0bd-4727-a1fb-3aa52f033095", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"64d87183-d63c-4855-b67f-6a3b3373785f", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b17617c9-11f6-4731-93ca-fa84fdd02bb6", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ae7ec59a-a05b-4a9c-a6c2-405a4ac89293", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3aacf04a-2556-462e-93b7-2510757c2c18", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3aacf04a-2556-462e-93b7-2510757c2c18", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d3a1b0cf-3d15-4d67-8d8d-a69a5321d681", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d3a1b0cf-3d15-4d67-8d8d-a69a5321d681", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d3a1b0cf-3d15-4d67-8d8d-a69a5321d681", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"544bb715-1397-4129-9612-1364befb767a", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"544bb715-1397-4129-9612-1364befb767a", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e99a4541-97f4-473a-b351-fd14b0b92049", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e99a4541-97f4-473a-b351-fd14b0b92049", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e99a4541-97f4-473a-b351-fd14b0b92049", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"76799651-dcaa-4d22-b4bb-fe3c9a4f1b66", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ab2a1939-13ac-47e5-9408-91421009c026", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"80c1e306-08db-4d72-b40a-32757f2eca8a", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fc5ab013-a576-4857-b547-07daa1e9d807", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"476c33a8-627a-431a-b312-ce6ac297aea7", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"476c33a8-627a-431a-b312-ce6ac297aea7", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e5d63380-07a7-43f8-8773-e1e2701b5eb2", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e5d63380-07a7-43f8-8773-e1e2701b5eb2", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fcf89736-3778-4879-89c2-7a86a3ce7f52", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"71c020eb-4f11-4e38-905e-87b707600f87", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ecb103f7-5096-4ed7-a43f-40bfd8076bcf", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"87812132-5396-476e-8c0e-54b966341657", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"af24a06e-6ac0-4add-8920-5ce99d9f157f", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"af24a06e-6ac0-4add-8920-5ce99d9f157f", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ec913bea-3cf9-467e-b5b5-005d93728344", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"10edbd79-feef-412c-be97-469e17b85e5e", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f2f5ef1-31f4-4d17-b527-3efd0f2a53b9", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"df3e0e5a-0939-4427-ade7-12afa141c5a1", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"df3e0e5a-0939-4427-ade7-12afa141c5a1", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"df3e0e5a-0939-4427-ade7-12afa141c5a1", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b0654f7f-5510-4ba8-92fe-ef127547689f", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dfd377fe-4315-4f6d-91a8-b779a51247cf", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c9a63427-e980-476e-abcb-44e355b9d983", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ef9bd34f-fd17-4742-821e-51cf6c224bd3", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5dc34092-99a2-4328-a78d-902dc9756508", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b4205fcd-599e-4598-a67e-b58e6f2d4314", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fd0670b8-b711-4979-b90c-fe65b28e2d86", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"77a38494-fdd5-4f72-8478-a069357389bb", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d2fcc8a4-22cc-4d0a-8c33-e2e4a30cf40d", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"870f726a-766c-4dff-ac8c-9bed95e4f4d4", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dad753ba-a0bd-4727-a1fb-3aa52f033095", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"64d87183-d63c-4855-b67f-6a3b3373785f", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b17617c9-11f6-4731-93ca-fa84fdd02bb6", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ae7ec59a-a05b-4a9c-a6c2-405a4ac89293", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3aacf04a-2556-462e-93b7-2510757c2c18", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d3a1b0cf-3d15-4d67-8d8d-a69a5321d681", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"544bb715-1397-4129-9612-1364befb767a", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e99a4541-97f4-473a-b351-fd14b0b92049", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"76799651-dcaa-4d22-b4bb-fe3c9a4f1b66", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ab2a1939-13ac-47e5-9408-91421009c026", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"80c1e306-08db-4d72-b40a-32757f2eca8a", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fc5ab013-a576-4857-b547-07daa1e9d807", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"476c33a8-627a-431a-b312-ce6ac297aea7", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e5d63380-07a7-43f8-8773-e1e2701b5eb2", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fcf89736-3778-4879-89c2-7a86a3ce7f52", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"71c020eb-4f11-4e38-905e-87b707600f87", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ecb103f7-5096-4ed7-a43f-40bfd8076bcf", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"87812132-5396-476e-8c0e-54b966341657", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"af24a06e-6ac0-4add-8920-5ce99d9f157f", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ec913bea-3cf9-467e-b5b5-005d93728344", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"10edbd79-feef-412c-be97-469e17b85e5e", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f2f5ef1-31f4-4d17-b527-3efd0f2a53b9", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"df3e0e5a-0939-4427-ade7-12afa141c5a1", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b0654f7f-5510-4ba8-92fe-ef127547689f", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dfd377fe-4315-4f6d-91a8-b779a51247cf", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c9a63427-e980-476e-abcb-44e355b9d983", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ef9bd34f-fd17-4742-821e-51cf6c224bd3", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5dc34092-99a2-4328-a78d-902dc9756508", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d521a3b5-5089-4a51-80a3-484658024bd8", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-4787-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1a29e712-0827-4fd6-b078-8365c60ed285", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776g286c465a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3b1b4e90-7816-43de-9452-e5f8c9ab51f3", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"2c16b9ea-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"aa2d8208-1341-459e-ac84-0fbd9edba04c", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"aa218f09-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d91fafbf-0b64-4908-8703-03f00449f23d", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42cd2542-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"69d32732-8174-4a62-8ac2-90da57a87873", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"69d32732-8174-4a62-8ac2-90da57a87873", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"69d32732-8174-4a62-8ac2-90da57a87873", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"22dc1cff-2c71-4fb2-80a4-95d745bfca11", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"46ac05ac-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"528b44af-3681-468b-9227-d8ef7e856574", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d8af500-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4aa13383-6283-4ac4-9f69-db130985a466", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9df06b7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"918f1702-fb57-470b-9648-cec8d9df2408", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e67492b-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"918f1702-fb57-470b-9648-cec8d9df2408", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e67492b-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5d508f54-292e-422b-b712-f3b833a6175d", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5d508f54-292e-422b-b712-f3b833a6175d", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5d508f54-292e-422b-b712-f3b833a6175d", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"276bf3e4-0b9f-4a9d-9ac7-f9bd7e966c0c", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf0de83c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"276bf3e4-0b9f-4a9d-9ac7-f9bd7e966c0c", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf0de83c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0afbc128-1a22-4d05-88ba-c17bef24370e", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0afbc128-1a22-4d05-88ba-c17bef24370e", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0afbc128-1a22-4d05-88ba-c17bef24370e", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a0ba17fa-c02e-477c-9bff-90429dae27d5", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"eb3f6f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"db7fbd41-fe5e-4cd2-8d00-8c22a2039a48", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a76d2e0a-a4b7-4ba0-bcdd-db583c7bd809", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"84c54e89-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"89fe61e0-42fc-4c27-99f9-02dcda0bc33a", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e60f30a8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c7eb83ac-9bb9-43ca-b15c-d319dd3f1396", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"61929f57-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c7eb83ac-9bb9-43ca-b15c-d319dd3f1396", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"61929f57-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7e784795-1cee-4e0f-b5e9-b296cee93112", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"d6ef8dd0-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7e784795-1cee-4e0f-b5e9-b296cee93112", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"d6ef8dd0-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"65a2d057-a8d8-4b3c-9278-1953ea91f488", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"31dc47d4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a8d3bf3b-6097-419a-b7e6-125a4a837c5a", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"284eb5b1-ff2e-47ad-9d90-4a708302ee79", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cf62daf6-71eb-49eb-95d6-17de18353856", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a8d722bf-6db9-4c3d-ab5f-9233d3e622f9", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a8d722bf-6db9-4c3d-ab5f-9233d3e622f9", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f537bc38-3b70-4b9c-93af-77c58835f5eb", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3c6effaf-44d5-4203-b1e3-c1ddc642f4e5", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1d861e90-4b2f-4f54-b058-52a68b30ed4b", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3e2ae251-b308-45b3-a734-d26764e80377", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3e2ae251-b308-45b3-a734-d26764e80377", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3e2ae251-b308-45b3-a734-d26764e80377", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ace07439-64c1-43b4-afde-e8a8f33b6f02", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5ed1d657-a40a-4ae3-a9c2-c7caf98373b6", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"712858d9-ac56-45a5-918f-01a005d3427f", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"aefb5d30-e375-4743-b137-7d5ce6a4a8ee", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5989782c-9e1c-412f-a3e4-a0edba3f53c9", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d521a3b5-5089-4a51-80a3-484658024bd8", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-4787-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1a29e712-0827-4fd6-b078-8365c60ed285", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776g286c465a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3b1b4e90-7816-43de-9452-e5f8c9ab51f3", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"2c16b9ea-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"aa2d8208-1341-459e-ac84-0fbd9edba04c", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"aa218f09-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d91fafbf-0b64-4908-8703-03f00449f23d", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42cd2542-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"69d32732-8174-4a62-8ac2-90da57a87873", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"22dc1cff-2c71-4fb2-80a4-95d745bfca11", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"46ac05ac-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"528b44af-3681-468b-9227-d8ef7e856574", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d8af500-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4aa13383-6283-4ac4-9f69-db130985a466", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9df06b7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"918f1702-fb57-470b-9648-cec8d9df2408", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e67492b-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5d508f54-292e-422b-b712-f3b833a6175d", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"276bf3e4-0b9f-4a9d-9ac7-f9bd7e966c0c", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf0de83c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0afbc128-1a22-4d05-88ba-c17bef24370e", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a0ba17fa-c02e-477c-9bff-90429dae27d5", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"eb3f6f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"db7fbd41-fe5e-4cd2-8d00-8c22a2039a48", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a76d2e0a-a4b7-4ba0-bcdd-db583c7bd809", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"84c54e89-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"89fe61e0-42fc-4c27-99f9-02dcda0bc33a", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e60f30a8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c7eb83ac-9bb9-43ca-b15c-d319dd3f1396", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"61929f57-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7e784795-1cee-4e0f-b5e9-b296cee93112", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"d6ef8dd0-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"65a2d057-a8d8-4b3c-9278-1953ea91f488", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"31dc47d4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a8d3bf3b-6097-419a-b7e6-125a4a837c5a", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"284eb5b1-ff2e-47ad-9d90-4a708302ee79", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cf62daf6-71eb-49eb-95d6-17de18353856", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a8d722bf-6db9-4c3d-ab5f-9233d3e622f9", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f537bc38-3b70-4b9c-93af-77c58835f5eb", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3c6effaf-44d5-4203-b1e3-c1ddc642f4e5", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1d861e90-4b2f-4f54-b058-52a68b30ed4b", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3e2ae251-b308-45b3-a734-d26764e80377", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ace07439-64c1-43b4-afde-e8a8f33b6f02", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5ed1d657-a40a-4ae3-a9c2-c7caf98373b6", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"712858d9-ac56-45a5-918f-01a005d3427f", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"aefb5d30-e375-4743-b137-7d5ce6a4a8ee", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5989782c-9e1c-412f-a3e4-a0edba3f53c9", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"275e5465-7ce5-468b-b8cc-cdd8cd163003", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-4787-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7d610252-1fdf-403b-aac6-dddb20eb0a0b", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776g286c465a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ce253fad-1603-4e9c-a619-e9c3ed88e49f", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"2c16b9ea-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"db2da61b-1dc9-4191-b1a5-ca96dddbae79", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"aa218f09-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3478e6cc-816e-46cc-8533-4323496c3e87", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42cd2542-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b379378a-4723-4da4-b616-ba3766b5445c", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b379378a-4723-4da4-b616-ba3766b5445c", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b379378a-4723-4da4-b616-ba3766b5445c", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"913ca9b1-d494-433e-a4cc-884178d7a78a", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"46ac05ac-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6bbf7822-2f00-46f6-99d1-d93d027eb01f", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d8af500-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e08f114b-9181-4325-b106-335decb7ae1c", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9df06b7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4cdf8d54-a393-4fa1-a775-b257becb3790", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e67492b-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4cdf8d54-a393-4fa1-a775-b257becb3790", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e67492b-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1493ea76-3bdc-49e9-adb5-0c87b761e02e", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1493ea76-3bdc-49e9-adb5-0c87b761e02e", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1493ea76-3bdc-49e9-adb5-0c87b761e02e", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"95848262-014e-4668-b568-620e258818db", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf0de83c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"95848262-014e-4668-b568-620e258818db", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf0de83c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d2c90ef7-d416-42cf-a529-23896edf6872", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d2c90ef7-d416-42cf-a529-23896edf6872", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d2c90ef7-d416-42cf-a529-23896edf6872", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d8f3700b-4631-45e2-aa07-18feda038362", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"eb3f6f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0f3231bc-4db0-423d-a408-bb9c95190400", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"da2dafac-0a16-4a23-a120-e33aecb2202d", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"84c54e89-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7cf138fe-aa25-414a-bbba-9f1625952eda", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e60f30a8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7144c248-6766-49b7-bd43-024a50208a37", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"61929f57-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7144c248-6766-49b7-bd43-024a50208a37", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"61929f57-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"442baeb4-fe11-4b28-94bb-366a075011d0", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"d6ef8dd0-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"442baeb4-fe11-4b28-94bb-366a075011d0", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"d6ef8dd0-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"be102f19-254a-45e5-a7cd-0a3f960dde3a", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"31dc47d4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8984c7ac-5b66-4d6f-ba50-6390af688096", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8e9ccee8-f383-462a-b25c-be8c915b7002", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b9da50a1-ab01-4135-aab3-d41f8154a655", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9f32ab93-f157-4bb3-9dfa-259a4c95ada1", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9f32ab93-f157-4bb3-9dfa-259a4c95ada1", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"042a0631-b688-4a36-a07e-bd02c103d716", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b9bd4fc6-818c-41f4-a596-817ba5b3a616", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1f56f5b6-6d02-4173-8a8a-f49cc545a338", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"75609214-2b7f-406a-9bcb-0dde0ea7dfd2", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"75609214-2b7f-406a-9bcb-0dde0ea7dfd2", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"75609214-2b7f-406a-9bcb-0dde0ea7dfd2", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"376dbbef-e13f-4d2d-aefe-2d85da5b3483", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7b83fd8b-3e87-4423-af9e-415463ee8350", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5cbe20fb-879f-4e54-ae29-a009f9d756bc", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a423150d-27af-4554-996b-3d0c9d97266a", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"898ca55a-88e3-41ac-8075-f291ce512ab6", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"275e5465-7ce5-468b-b8cc-cdd8cd163003", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-4787-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7d610252-1fdf-403b-aac6-dddb20eb0a0b", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776g286c465a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ce253fad-1603-4e9c-a619-e9c3ed88e49f", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"2c16b9ea-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"db2da61b-1dc9-4191-b1a5-ca96dddbae79", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"aa218f09-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3478e6cc-816e-46cc-8533-4323496c3e87", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42cd2542-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b379378a-4723-4da4-b616-ba3766b5445c", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"913ca9b1-d494-433e-a4cc-884178d7a78a", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"46ac05ac-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6bbf7822-2f00-46f6-99d1-d93d027eb01f", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d8af500-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e08f114b-9181-4325-b106-335decb7ae1c", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9df06b7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4cdf8d54-a393-4fa1-a775-b257becb3790", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e67492b-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1493ea76-3bdc-49e9-adb5-0c87b761e02e", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"95848262-014e-4668-b568-620e258818db", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf0de83c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d2c90ef7-d416-42cf-a529-23896edf6872", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d8f3700b-4631-45e2-aa07-18feda038362", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"eb3f6f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0f3231bc-4db0-423d-a408-bb9c95190400", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"da2dafac-0a16-4a23-a120-e33aecb2202d", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"84c54e89-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7cf138fe-aa25-414a-bbba-9f1625952eda", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e60f30a8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7144c248-6766-49b7-bd43-024a50208a37", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"61929f57-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"442baeb4-fe11-4b28-94bb-366a075011d0", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"d6ef8dd0-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"be102f19-254a-45e5-a7cd-0a3f960dde3a", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"31dc47d4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8984c7ac-5b66-4d6f-ba50-6390af688096", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8e9ccee8-f383-462a-b25c-be8c915b7002", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b9da50a1-ab01-4135-aab3-d41f8154a655", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9f32ab93-f157-4bb3-9dfa-259a4c95ada1", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"042a0631-b688-4a36-a07e-bd02c103d716", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b9bd4fc6-818c-41f4-a596-817ba5b3a616", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1f56f5b6-6d02-4173-8a8a-f49cc545a338", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"75609214-2b7f-406a-9bcb-0dde0ea7dfd2", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"376dbbef-e13f-4d2d-aefe-2d85da5b3483", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7b83fd8b-3e87-4423-af9e-415463ee8350", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5cbe20fb-879f-4e54-ae29-a009f9d756bc", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a423150d-27af-4554-996b-3d0c9d97266a", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"898ca55a-88e3-41ac-8075-f291ce512ab6", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b04a4ea8-260b-469f-90ee-94ff04cb45cf", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"19898db6-4427-4c5e-a912-ba413d04fac2", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"54e07538-c8bb-4096-8b6d-7e0002c8f6b9", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"644f30b6-a1e3-4de3-a504-94c175d51295", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e425f045-7de8-40e7-a5f5-42b5d180e228", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fcc36290-826d-4a59-8696-10ceadd16e13", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fcc36290-826d-4a59-8696-10ceadd16e13", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fcc36290-826d-4a59-8696-10ceadd16e13", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5db3e9f4-c480-4347-a27d-2eb9a7dc8a6e", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4e68701e-a296-4158-a459-849bbc51c840", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38357423-a708-48fd-95d1-eb933131f08f", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8682b895-be2e-486e-9088-0ead3e23be1f", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8682b895-be2e-486e-9088-0ead3e23be1f", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6a031489-897c-4c4f-80dc-edaaf08079c0", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6a031489-897c-4c4f-80dc-edaaf08079c0", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6a031489-897c-4c4f-80dc-edaaf08079c0", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2dab87dc-6f8d-43df-8d00-52400994f920", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2dab87dc-6f8d-43df-8d00-52400994f920", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f0866b45-f019-4b49-ac9c-458c68f7d165", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f0866b45-f019-4b49-ac9c-458c68f7d165", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f0866b45-f019-4b49-ac9c-458c68f7d165", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"430fea41-42af-4d6f-ba51-85daf1bd8dff", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"af59daec-2bfd-4e93-a14e-f624e5fae485", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0ae69494-106a-4ad8-af87-09235feb1904", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"627b58a0-2d78-4720-bb05-5a8858e6abdf", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0e192ae3-5195-4e63-92da-4d567cc74ad2", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0e192ae3-5195-4e63-92da-4d567cc74ad2", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f67f3d1f-3fd0-480e-9343-e0d08bf556eb", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f67f3d1f-3fd0-480e-9343-e0d08bf556eb", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9a667be3-68c4-4ad7-b34d-f8dbf2ba5ca2", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8462395b-598e-44aa-9767-a0ceaa7c52ce", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"74b2f2dc-b6f2-490a-a667-ff91ad330aa0", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3e14ea33-ab6c-4166-bb0c-8c1ab211c297", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7d94423a-3d48-4b46-9cca-6a689da474e2", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7d94423a-3d48-4b46-9cca-6a689da474e2", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f5d05f5c-4798-4e8f-a1bd-a3a60e8b915f", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d6fd23ea-04b1-487c-a2c9-893da3f9cfd7", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e8c303f9-80d4-467b-bb7f-34a96154388c", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38685bf4-7606-49e0-bad1-69512df07cf2", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38685bf4-7606-49e0-bad1-69512df07cf2", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38685bf4-7606-49e0-bad1-69512df07cf2", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3c877a2c-1371-4e73-82e9-bde5b54153af", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2fed6462-6974-4a79-8dcb-cbdd43170d53", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4cb66508-ebdf-4cf9-ba6b-4ac48636e775", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"64428e37-edfb-40ef-9b39-fded224b6a17", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"596ecba0-7862-45c2-84de-5e8111c2021b", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b04a4ea8-260b-469f-90ee-94ff04cb45cf", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"19898db6-4427-4c5e-a912-ba413d04fac2", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"54e07538-c8bb-4096-8b6d-7e0002c8f6b9", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"644f30b6-a1e3-4de3-a504-94c175d51295", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e425f045-7de8-40e7-a5f5-42b5d180e228", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fcc36290-826d-4a59-8696-10ceadd16e13", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5db3e9f4-c480-4347-a27d-2eb9a7dc8a6e", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4e68701e-a296-4158-a459-849bbc51c840", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38357423-a708-48fd-95d1-eb933131f08f", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8682b895-be2e-486e-9088-0ead3e23be1f", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6a031489-897c-4c4f-80dc-edaaf08079c0", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2dab87dc-6f8d-43df-8d00-52400994f920", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f0866b45-f019-4b49-ac9c-458c68f7d165", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"430fea41-42af-4d6f-ba51-85daf1bd8dff", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"af59daec-2bfd-4e93-a14e-f624e5fae485", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0ae69494-106a-4ad8-af87-09235feb1904", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"627b58a0-2d78-4720-bb05-5a8858e6abdf", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0e192ae3-5195-4e63-92da-4d567cc74ad2", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f67f3d1f-3fd0-480e-9343-e0d08bf556eb", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9a667be3-68c4-4ad7-b34d-f8dbf2ba5ca2", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8462395b-598e-44aa-9767-a0ceaa7c52ce", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"74b2f2dc-b6f2-490a-a667-ff91ad330aa0", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3e14ea33-ab6c-4166-bb0c-8c1ab211c297", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7d94423a-3d48-4b46-9cca-6a689da474e2", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f5d05f5c-4798-4e8f-a1bd-a3a60e8b915f", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d6fd23ea-04b1-487c-a2c9-893da3f9cfd7", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e8c303f9-80d4-467b-bb7f-34a96154388c", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38685bf4-7606-49e0-bad1-69512df07cf2", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3c877a2c-1371-4e73-82e9-bde5b54153af", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2fed6462-6974-4a79-8dcb-cbdd43170d53", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4cb66508-ebdf-4cf9-ba6b-4ac48636e775", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"64428e37-edfb-40ef-9b39-fded224b6a17", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"596ecba0-7862-45c2-84de-5e8111c2021b", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d1dcac85-8a4e-4dec-9621-65c80372e9be", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b5d310e0-b35f-4dff-8a52-7ef1ed04fd39", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"805f09ca-e958-4433-b6a2-ab59f23357c1", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"baa82e7d-83ac-4c49-9581-4a26f1a33fd3", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"834a3908-4096-4f96-910a-40c2e382cffb", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5ea021a3-91ed-41f3-ada4-75318f0c4f72", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5ea021a3-91ed-41f3-ada4-75318f0c4f72", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5ea021a3-91ed-41f3-ada4-75318f0c4f72", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"386046ad-40a0-4c56-b94b-11f76d3dcb51", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"81c31edc-a193-47eb-8e46-4936c96c6665", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e6ac93ae-02ed-4a4a-81d3-a71bab4e2325", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"507965a7-abe1-46ac-b2e7-c6955a9ea2b5", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"507965a7-abe1-46ac-b2e7-c6955a9ea2b5", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f578125-ca76-4a0f-8c5a-e86bfdba8675", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f578125-ca76-4a0f-8c5a-e86bfdba8675", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f578125-ca76-4a0f-8c5a-e86bfdba8675", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c53cb828-3ecd-43ab-a37c-48d12e3a9e69", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c53cb828-3ecd-43ab-a37c-48d12e3a9e69", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f67fb930-73f5-4884-b834-0d3efa5227bf", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f67fb930-73f5-4884-b834-0d3efa5227bf", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f67fb930-73f5-4884-b834-0d3efa5227bf", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9d80a393-5045-494e-94ad-73ef10ce245d", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"03e2e07d-0113-4c78-9d57-5db437d95526", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"98511578-754a-4a85-949a-e9a48aba2f08", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e75b4456-a5a2-41df-afc0-b475981b7161", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ede6b243-1ea1-4f63-82bd-1cf78634dcbc", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ede6b243-1ea1-4f63-82bd-1cf78634dcbc", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7cf75002-9e8a-419d-a84d-345b084731b1", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7cf75002-9e8a-419d-a84d-345b084731b1", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"21440711-ade4-472c-a794-c5726ebb7c0d", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"92740464-3dba-494b-8499-1ff88a99409e", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"36b67916-f94e-4368-8e5c-18d3460c2c17", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"09eeb220-48fe-43de-ab80-27cddfc23d31", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8efc241b-5412-47a2-a81b-cc60ea7073f7", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8efc241b-5412-47a2-a81b-cc60ea7073f7", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"24aacfb5-8a7d-4a0c-9333-31e654fd8721", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f5ba9b5b-d768-4572-8d2e-cc2762ea3c26", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4ab38711-26f8-481f-9e71-e8dd9bded5b0", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8adbd918-4689-4082-a922-bc5da40aa66f", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8adbd918-4689-4082-a922-bc5da40aa66f", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8adbd918-4689-4082-a922-bc5da40aa66f", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"85e9395e-084c-43d9-a2d5-ed0e131b5e50", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8197655e-4225-47e9-ab96-c1a0e7349f89", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4a555127-0114-4c1f-8877-8c955f1d877f", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"eb0d0c03-c2be-44bc-9913-9369c8e9328b", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"60cfc9f1-1d7d-4b23-8930-a5a2b7ca6601", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d1dcac85-8a4e-4dec-9621-65c80372e9be", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b5d310e0-b35f-4dff-8a52-7ef1ed04fd39", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"805f09ca-e958-4433-b6a2-ab59f23357c1", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"baa82e7d-83ac-4c49-9581-4a26f1a33fd3", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"834a3908-4096-4f96-910a-40c2e382cffb", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5ea021a3-91ed-41f3-ada4-75318f0c4f72", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"386046ad-40a0-4c56-b94b-11f76d3dcb51", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"81c31edc-a193-47eb-8e46-4936c96c6665", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e6ac93ae-02ed-4a4a-81d3-a71bab4e2325", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"507965a7-abe1-46ac-b2e7-c6955a9ea2b5", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f578125-ca76-4a0f-8c5a-e86bfdba8675", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c53cb828-3ecd-43ab-a37c-48d12e3a9e69", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f67fb930-73f5-4884-b834-0d3efa5227bf", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9d80a393-5045-494e-94ad-73ef10ce245d", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"03e2e07d-0113-4c78-9d57-5db437d95526", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"98511578-754a-4a85-949a-e9a48aba2f08", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e75b4456-a5a2-41df-afc0-b475981b7161", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ede6b243-1ea1-4f63-82bd-1cf78634dcbc", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7cf75002-9e8a-419d-a84d-345b084731b1", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"21440711-ade4-472c-a794-c5726ebb7c0d", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"92740464-3dba-494b-8499-1ff88a99409e", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"36b67916-f94e-4368-8e5c-18d3460c2c17", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"09eeb220-48fe-43de-ab80-27cddfc23d31", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8efc241b-5412-47a2-a81b-cc60ea7073f7", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"24aacfb5-8a7d-4a0c-9333-31e654fd8721", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f5ba9b5b-d768-4572-8d2e-cc2762ea3c26", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4ab38711-26f8-481f-9e71-e8dd9bded5b0", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8adbd918-4689-4082-a922-bc5da40aa66f", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"85e9395e-084c-43d9-a2d5-ed0e131b5e50", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8197655e-4225-47e9-ab96-c1a0e7349f89", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4a555127-0114-4c1f-8877-8c955f1d877f", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"eb0d0c03-c2be-44bc-9913-9369c8e9328b", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"60cfc9f1-1d7d-4b23-8930-a5a2b7ca6601", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e957d3b2-9bd3-4c20-be47-38152e947db0", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"28e2e028-9920-40e7-8335-a9d04da9ddc6", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"74888786-2c9f-4eb9-aa7d-53236c750951", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fe545962-6e29-4e80-a06e-67fca57a2254", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c176413e-2796-4d46-9f17-2a6d9aadaeaf", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"87acba9b-517e-4d78-8f26-739349d1aaa0", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"87acba9b-517e-4d78-8f26-739349d1aaa0", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"87acba9b-517e-4d78-8f26-739349d1aaa0", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"22a19b7d-cba4-4b47-bb68-7289247a03c7", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ba79eba4-7b7f-47e0-aed7-e7de0356fe92", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"df344b2d-673e-453b-aa83-1da259987670", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a89a4259-7095-493a-8687-78023c824d2b", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a89a4259-7095-493a-8687-78023c824d2b", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"447e1417-bf4b-4757-8883-e973f27c07aa", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"447e1417-bf4b-4757-8883-e973f27c07aa", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"447e1417-bf4b-4757-8883-e973f27c07aa", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e98ccfca-24c7-4b15-867c-b75bebc0d1bb", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e98ccfca-24c7-4b15-867c-b75bebc0d1bb", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3cafec85-b28b-431d-ab27-4d397e6803d5", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3cafec85-b28b-431d-ab27-4d397e6803d5", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3cafec85-b28b-431d-ab27-4d397e6803d5", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b9a44f6e-7a85-4b5d-a944-f14285cb8146", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fd26b15c-ee6a-42d4-ab4e-e0721f64fe32", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"54ddee54-3762-461a-965e-4543b2207f2f", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dee4cdae-4ed7-4761-81f0-8c1952336d25", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f323b3dc-8732-4039-bc59-6d8d275bbe79", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f323b3dc-8732-4039-bc59-6d8d275bbe79", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1e6617af-6b58-4e2e-a6a2-4b50930337dc", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1e6617af-6b58-4e2e-a6a2-4b50930337dc", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c0a1d74f-7d9e-43dc-ab08-b1417fcb93a3", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6b3d1aac-4e6d-4834-9f2b-5f52c9257302", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"69e6d0a6-911a-418c-b1a6-8a63d8a0960e", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8a71d19e-0237-4bd5-afa3-b25a611aebd9", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3212dd08-af94-49cf-babe-55d11ee08ff4", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3212dd08-af94-49cf-babe-55d11ee08ff4", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"63d4b5a9-566b-4536-84ae-8967b50cfff9", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"616e73ed-8eca-44a3-9602-35403b1f6765", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cc4cc90e-9161-4255-907d-04410594757d", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"be32b694-80fa-48bb-9780-0fdc2b343a3f", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"be32b694-80fa-48bb-9780-0fdc2b343a3f", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"be32b694-80fa-48bb-9780-0fdc2b343a3f", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"afe5a9bb-6f9b-4d6f-89c2-f7705a719dfe", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"97ad7b64-2dde-40b2-a94d-96e09c4cf181", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"495a4045-afbb-4141-a618-fd50f4efe5e9", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"41ff5467-24f3-4286-9f61-2e2df2ed2127", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2562e3de-93a3-4bc8-ac5f-8f9fd5676db2", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e957d3b2-9bd3-4c20-be47-38152e947db0", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"28e2e028-9920-40e7-8335-a9d04da9ddc6", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"74888786-2c9f-4eb9-aa7d-53236c750951", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fe545962-6e29-4e80-a06e-67fca57a2254", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c176413e-2796-4d46-9f17-2a6d9aadaeaf", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"87acba9b-517e-4d78-8f26-739349d1aaa0", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"22a19b7d-cba4-4b47-bb68-7289247a03c7", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ba79eba4-7b7f-47e0-aed7-e7de0356fe92", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"df344b2d-673e-453b-aa83-1da259987670", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a89a4259-7095-493a-8687-78023c824d2b", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"447e1417-bf4b-4757-8883-e973f27c07aa", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e98ccfca-24c7-4b15-867c-b75bebc0d1bb", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3cafec85-b28b-431d-ab27-4d397e6803d5", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b9a44f6e-7a85-4b5d-a944-f14285cb8146", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fd26b15c-ee6a-42d4-ab4e-e0721f64fe32", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"54ddee54-3762-461a-965e-4543b2207f2f", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dee4cdae-4ed7-4761-81f0-8c1952336d25", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f323b3dc-8732-4039-bc59-6d8d275bbe79", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1e6617af-6b58-4e2e-a6a2-4b50930337dc", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c0a1d74f-7d9e-43dc-ab08-b1417fcb93a3", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6b3d1aac-4e6d-4834-9f2b-5f52c9257302", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"69e6d0a6-911a-418c-b1a6-8a63d8a0960e", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8a71d19e-0237-4bd5-afa3-b25a611aebd9", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3212dd08-af94-49cf-babe-55d11ee08ff4", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"63d4b5a9-566b-4536-84ae-8967b50cfff9", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"616e73ed-8eca-44a3-9602-35403b1f6765", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cc4cc90e-9161-4255-907d-04410594757d", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"be32b694-80fa-48bb-9780-0fdc2b343a3f", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"afe5a9bb-6f9b-4d6f-89c2-f7705a719dfe", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"97ad7b64-2dde-40b2-a94d-96e09c4cf181", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"495a4045-afbb-4141-a618-fd50f4efe5e9", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"41ff5467-24f3-4286-9f61-2e2df2ed2127", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2562e3de-93a3-4bc8-ac5f-8f9fd5676db2", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4f2833bb-c840-4349-89ff-f1b7c78786af", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2b3c8e6a-7483-4265-a493-886ab33c9af3", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"272c375d-de2f-4388-8f08-eb6713a03f0b", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f87a65cb-0654-45cf-92d2-25bcb72519a6", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c2ffe0b8-acd0-4d40-a77c-08e0c4ba2423", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5b9476a5-8a7c-4906-8649-c0694240fd73", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5b9476a5-8a7c-4906-8649-c0694240fd73", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5b9476a5-8a7c-4906-8649-c0694240fd73", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b7db0ca0-09df-4b1d-92da-64ee55409c13", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8ab13419-4608-4f17-935f-e9b0696f04f7", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c325b332-21fc-4ada-8da8-a4436ff88bd2", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7e1bf436-e118-4b46-afb1-aa2744ffde72", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7e1bf436-e118-4b46-afb1-aa2744ffde72", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b721e48b-6105-487e-b832-aff49a168e7a", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b721e48b-6105-487e-b832-aff49a168e7a", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b721e48b-6105-487e-b832-aff49a168e7a", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d38a99d1-15fa-4b2a-8509-838e5168f20b", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d38a99d1-15fa-4b2a-8509-838e5168f20b", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"924c9ed6-15a3-471f-ae49-77f3fc2ec783", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"924c9ed6-15a3-471f-ae49-77f3fc2ec783", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"924c9ed6-15a3-471f-ae49-77f3fc2ec783", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8c524ef1-2d4d-4dc9-a7da-7af2690ba1e3", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"60a27f74-a635-4a4c-b069-36e1a395733c", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"096e44e7-c0f3-48cd-9fa7-d412a5f299cf", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"db041cbd-6be0-490f-90b2-dc062a510546", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"21d45424-b6ed-4f26-bdc8-f7064b58f5d0", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"21d45424-b6ed-4f26-bdc8-f7064b58f5d0", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8834ac0d-74e9-4abf-973b-8d8b31cfd25a", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8834ac0d-74e9-4abf-973b-8d8b31cfd25a", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7419d575-be7b-4eb8-a225-2e16b2ecf3ee", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b6bf12eb-d9c4-4b23-b110-5751f45f5c4d", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c20ecf18-9798-40af-ae97-89207fa896fc", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"25055d8e-db14-469b-9b67-c18f0605f304", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"46255ba9-2be2-4908-80d5-3ca33052d008", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"46255ba9-2be2-4908-80d5-3ca33052d008", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9b53ddff-1ac8-42bb-9aba-81cfe3508276", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ecb751ea-4aca-4ac9-b2bf-06d4df69e54d", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5b92b906-9468-440b-95b9-a888bcc2dab9", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f22e0e37-5c06-4e2b-b109-c67fd753dd90", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f22e0e37-5c06-4e2b-b109-c67fd753dd90", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f22e0e37-5c06-4e2b-b109-c67fd753dd90", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"33ed4b92-14f6-4de8-a096-450add683859", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5010ac11-ea24-4c67-9f62-e64c39fe2d2e", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"39a097f9-2044-44a5-a440-cd2c57927676", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38b9754e-efb4-443b-9ca0-3c0b10d1c334", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b049d9ab-900f-433c-a5d4-b3999737ab13", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4f2833bb-c840-4349-89ff-f1b7c78786af", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2b3c8e6a-7483-4265-a493-886ab33c9af3", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"272c375d-de2f-4388-8f08-eb6713a03f0b", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f87a65cb-0654-45cf-92d2-25bcb72519a6", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c2ffe0b8-acd0-4d40-a77c-08e0c4ba2423", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5b9476a5-8a7c-4906-8649-c0694240fd73", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b7db0ca0-09df-4b1d-92da-64ee55409c13", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8ab13419-4608-4f17-935f-e9b0696f04f7", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c325b332-21fc-4ada-8da8-a4436ff88bd2", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7e1bf436-e118-4b46-afb1-aa2744ffde72", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b721e48b-6105-487e-b832-aff49a168e7a", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d38a99d1-15fa-4b2a-8509-838e5168f20b", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"924c9ed6-15a3-471f-ae49-77f3fc2ec783", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8c524ef1-2d4d-4dc9-a7da-7af2690ba1e3", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"60a27f74-a635-4a4c-b069-36e1a395733c", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"096e44e7-c0f3-48cd-9fa7-d412a5f299cf", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"db041cbd-6be0-490f-90b2-dc062a510546", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"21d45424-b6ed-4f26-bdc8-f7064b58f5d0", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8834ac0d-74e9-4abf-973b-8d8b31cfd25a", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7419d575-be7b-4eb8-a225-2e16b2ecf3ee", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b6bf12eb-d9c4-4b23-b110-5751f45f5c4d", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c20ecf18-9798-40af-ae97-89207fa896fc", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"25055d8e-db14-469b-9b67-c18f0605f304", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"46255ba9-2be2-4908-80d5-3ca33052d008", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9b53ddff-1ac8-42bb-9aba-81cfe3508276", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ecb751ea-4aca-4ac9-b2bf-06d4df69e54d", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5b92b906-9468-440b-95b9-a888bcc2dab9", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f22e0e37-5c06-4e2b-b109-c67fd753dd90", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"33ed4b92-14f6-4de8-a096-450add683859", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5010ac11-ea24-4c67-9f62-e64c39fe2d2e", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"39a097f9-2044-44a5-a440-cd2c57927676", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38b9754e-efb4-443b-9ca0-3c0b10d1c334", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b049d9ab-900f-433c-a5d4-b3999737ab13", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f148f290-d507-4dce-9b39-a9167ed1a8b9", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"08beebf9-c99c-4593-bf02-02986ee22e15", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"163695a9-9095-454d-a079-08a144811b08", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f8d53b4-438d-40a1-9943-a2cb29de70e5", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cb63dd0d-9289-4b68-85e2-236c0826c3ae", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"81df2706-78da-4391-8128-c266b78664c6", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"81df2706-78da-4391-8128-c266b78664c6", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"81df2706-78da-4391-8128-c266b78664c6", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5e529a22-43f9-4788-930c-ef857e315c16", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ab3fc227-d941-4149-92b7-b2a2fbf4779b", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"beb48696-ad16-417e-94b9-c0f044876413", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4ae78540-a061-4751-8df4-54f866b9e137", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4ae78540-a061-4751-8df4-54f866b9e137", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f7131951-d9db-49cf-8f86-2ea8e329b4a1", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f7131951-d9db-49cf-8f86-2ea8e329b4a1", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f7131951-d9db-49cf-8f86-2ea8e329b4a1", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"384336d9-df84-4c2e-b479-54550f308a99", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"384336d9-df84-4c2e-b479-54550f308a99", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"46b3c1b4-a539-4d5c-bc33-40be82d35e80", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"46b3c1b4-a539-4d5c-bc33-40be82d35e80", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"46b3c1b4-a539-4d5c-bc33-40be82d35e80", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b057355f-0b00-4ce9-a406-5cb3fc3b8c03", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c3a3c284-736a-4845-a9fe-4218173b9705", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38774f8d-afdc-4ade-9bf3-edbf35a4d6f5", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"da02bab8-fae2-41bc-9218-a96389cda0f0", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1d84f59e-a485-49a6-97f6-6dd3b07553f5", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1d84f59e-a485-49a6-97f6-6dd3b07553f5", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ed9ce741-6ef0-4728-bcb4-317864f33ab6", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ed9ce741-6ef0-4728-bcb4-317864f33ab6", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d62c6eb9-3036-4488-98d8-63f0c11e7aa7", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"524c6d57-d622-4ede-9261-b670a42c2bf5", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"80b6ddf6-c295-4855-98d0-cd3fe1e46c85", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0497093e-d49c-4f90-b92c-47e8c0369326", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2623b8f9-dc4c-4866-898f-9bda337d52b1", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2623b8f9-dc4c-4866-898f-9bda337d52b1", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5e462f6f-fccc-4c3e-be96-c808c9939ef0", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4dfe2284-a8e2-4be0-8b35-16764884422a", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6f16e2a8-ebef-4390-b38f-5e0c85308191", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2a6f61c5-00ea-443d-87ee-505624ccd53e", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2a6f61c5-00ea-443d-87ee-505624ccd53e", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2a6f61c5-00ea-443d-87ee-505624ccd53e", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"515d0f4c-c40f-443b-a6c1-e47b0d4751f2", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"add51cc7-381b-4695-98da-838f137c5126", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dfa77069-9d72-45e1-b6ff-ab7fb66ceb68", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5f0f4e1c-b942-4c38-9940-126c2cf7afd6", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9eeece51-5511-4e53-a9ae-ec4311fd4da6", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f148f290-d507-4dce-9b39-a9167ed1a8b9", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"08beebf9-c99c-4593-bf02-02986ee22e15", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"163695a9-9095-454d-a079-08a144811b08", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2f8d53b4-438d-40a1-9943-a2cb29de70e5", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cb63dd0d-9289-4b68-85e2-236c0826c3ae", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"81df2706-78da-4391-8128-c266b78664c6", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5e529a22-43f9-4788-930c-ef857e315c16", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ab3fc227-d941-4149-92b7-b2a2fbf4779b", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"beb48696-ad16-417e-94b9-c0f044876413", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4ae78540-a061-4751-8df4-54f866b9e137", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f7131951-d9db-49cf-8f86-2ea8e329b4a1", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"384336d9-df84-4c2e-b479-54550f308a99", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"46b3c1b4-a539-4d5c-bc33-40be82d35e80", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b057355f-0b00-4ce9-a406-5cb3fc3b8c03", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c3a3c284-736a-4845-a9fe-4218173b9705", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"38774f8d-afdc-4ade-9bf3-edbf35a4d6f5", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"da02bab8-fae2-41bc-9218-a96389cda0f0", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1d84f59e-a485-49a6-97f6-6dd3b07553f5", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ed9ce741-6ef0-4728-bcb4-317864f33ab6", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d62c6eb9-3036-4488-98d8-63f0c11e7aa7", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"524c6d57-d622-4ede-9261-b670a42c2bf5", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"80b6ddf6-c295-4855-98d0-cd3fe1e46c85", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0497093e-d49c-4f90-b92c-47e8c0369326", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2623b8f9-dc4c-4866-898f-9bda337d52b1", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5e462f6f-fccc-4c3e-be96-c808c9939ef0", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4dfe2284-a8e2-4be0-8b35-16764884422a", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6f16e2a8-ebef-4390-b38f-5e0c85308191", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2a6f61c5-00ea-443d-87ee-505624ccd53e", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"515d0f4c-c40f-443b-a6c1-e47b0d4751f2", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"add51cc7-381b-4695-98da-838f137c5126", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dfa77069-9d72-45e1-b6ff-ab7fb66ceb68", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5f0f4e1c-b942-4c38-9940-126c2cf7afd6", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9eeece51-5511-4e53-a9ae-ec4311fd4da6", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8b78a5ee-9952-4397-a175-0a99ca5ba1a6", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ee562561-1588-49a7-89ca-c489ff049085", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1c7fba1f-a74a-488f-8aa2-c42de218714d", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fa9f20b9-967e-455c-acbe-e4dde7b8d43a", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a463a5f2-f7f9-4bf4-a660-4003e724178f", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e5ba88c7-de4d-4bda-abaf-e7548ed1e140", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e5ba88c7-de4d-4bda-abaf-e7548ed1e140", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e5ba88c7-de4d-4bda-abaf-e7548ed1e140", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8fb88062-7e39-4dfc-becc-980ee412bc8f", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"864d4a35-70ab-4d52-8afd-f20325458a33", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"00d21807-97ae-4eee-a35d-0673abdc8ba9", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f9970e72-7626-4fff-aaff-a8caceeb331f", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f9970e72-7626-4fff-aaff-a8caceeb331f", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"68b00326-1de5-4b24-96df-6ba5c6645f37", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"68b00326-1de5-4b24-96df-6ba5c6645f37", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"68b00326-1de5-4b24-96df-6ba5c6645f37", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a1b143bd-9d8f-45f7-8267-5e930ca28da8", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a1b143bd-9d8f-45f7-8267-5e930ca28da8", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"94752bd1-bcbc-401a-8b5d-0a6cd27848e5", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"94752bd1-bcbc-401a-8b5d-0a6cd27848e5", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"94752bd1-bcbc-401a-8b5d-0a6cd27848e5", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6fc13130-efd5-4c08-8d9a-d7cf10cbed85", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5bc7f39f-61c6-4e9a-9a42-226ce0777c64", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"34eaddf2-2e58-46a3-b9f0-10e9858a7251", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"514ababb-330a-4b4f-9e37-cac270eff1b6", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"61e6f72e-2ef8-4260-99b7-29a34e9d4982", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"61e6f72e-2ef8-4260-99b7-29a34e9d4982", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"46973d0f-c37f-4e5d-a5ca-0f99949e13cc", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"46973d0f-c37f-4e5d-a5ca-0f99949e13cc", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3ef83759-5149-4971-b1e3-4cf78dd10202", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8ba2c823-bd8a-493f-899b-74b4deee63ac", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c5073f34-38dc-424c-a05b-5509c0823922", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1edcef50-31a6-429a-bc70-6fa80b84ae50", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f7f9b70d-434c-4dc6-b64c-daa36d7564fc", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f7f9b70d-434c-4dc6-b64c-daa36d7564fc", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"42a5a346-05a1-4d87-9b3b-c4a4f3f0120c", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"83ef1f7f-a704-4801-bdfb-339b91050b51", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ee63292c-da7a-4d8f-b1ed-50506f765b7e", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"236eb8a8-841a-44b7-8a25-0eadbee2e0d5", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"236eb8a8-841a-44b7-8a25-0eadbee2e0d5", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"236eb8a8-841a-44b7-8a25-0eadbee2e0d5", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c71f71aa-e4b6-4ce9-82ce-9319501d0a35", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"726f725f-0649-49fa-bc3f-97f41f825d62", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f2390f05-8206-47ea-b429-1d0e95eef6b7", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"afdd7363-adc7-49ec-82da-3a807c6a2a73", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"94eb54e4-6509-4bfb-ae1b-e920b7b0e124", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8b78a5ee-9952-4397-a175-0a99ca5ba1a6", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ee562561-1588-49a7-89ca-c489ff049085", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1c7fba1f-a74a-488f-8aa2-c42de218714d", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fa9f20b9-967e-455c-acbe-e4dde7b8d43a", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a463a5f2-f7f9-4bf4-a660-4003e724178f", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e5ba88c7-de4d-4bda-abaf-e7548ed1e140", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8fb88062-7e39-4dfc-becc-980ee412bc8f", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"864d4a35-70ab-4d52-8afd-f20325458a33", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"00d21807-97ae-4eee-a35d-0673abdc8ba9", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f9970e72-7626-4fff-aaff-a8caceeb331f", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"68b00326-1de5-4b24-96df-6ba5c6645f37", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a1b143bd-9d8f-45f7-8267-5e930ca28da8", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"94752bd1-bcbc-401a-8b5d-0a6cd27848e5", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6fc13130-efd5-4c08-8d9a-d7cf10cbed85", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5bc7f39f-61c6-4e9a-9a42-226ce0777c64", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"34eaddf2-2e58-46a3-b9f0-10e9858a7251", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"514ababb-330a-4b4f-9e37-cac270eff1b6", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"61e6f72e-2ef8-4260-99b7-29a34e9d4982", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"46973d0f-c37f-4e5d-a5ca-0f99949e13cc", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3ef83759-5149-4971-b1e3-4cf78dd10202", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8ba2c823-bd8a-493f-899b-74b4deee63ac", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c5073f34-38dc-424c-a05b-5509c0823922", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1edcef50-31a6-429a-bc70-6fa80b84ae50", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f7f9b70d-434c-4dc6-b64c-daa36d7564fc", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"42a5a346-05a1-4d87-9b3b-c4a4f3f0120c", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"83ef1f7f-a704-4801-bdfb-339b91050b51", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ee63292c-da7a-4d8f-b1ed-50506f765b7e", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"236eb8a8-841a-44b7-8a25-0eadbee2e0d5", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c71f71aa-e4b6-4ce9-82ce-9319501d0a35", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"726f725f-0649-49fa-bc3f-97f41f825d62", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f2390f05-8206-47ea-b429-1d0e95eef6b7", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"afdd7363-adc7-49ec-82da-3a807c6a2a73", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"94eb54e4-6509-4bfb-ae1b-e920b7b0e124", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f650fea5-378d-4b8f-acfa-15c25f5aa433", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0091d607-d645-40a4-a3cd-07bc2877d971", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6496f12a-ee89-4651-8a1b-cc26a714dc18", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"da2b9137-3276-46a6-b0bc-0e86ea688016", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d4bff2bf-89f7-47d9-9447-da6c6b30ce3c", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"616c5718-8941-402b-a840-89381baf0942", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"616c5718-8941-402b-a840-89381baf0942", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"616c5718-8941-402b-a840-89381baf0942", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b5ace162-ecb7-42bd-aa71-7d64267c4bff", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"319666fa-1283-4b74-bbd6-137c70459681", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4d2db5ee-3b58-49c7-a1c8-3cace2bf8310", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"add77969-78fe-40e2-952b-7d5c1c1b2416", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"add77969-78fe-40e2-952b-7d5c1c1b2416", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e6e1045d-d2a7-447a-b6e1-763dd65ec59f", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e6e1045d-d2a7-447a-b6e1-763dd65ec59f", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e6e1045d-d2a7-447a-b6e1-763dd65ec59f", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ee30c251-0e2b-4b18-ae0b-9c5918ff2b6d", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ee30c251-0e2b-4b18-ae0b-9c5918ff2b6d", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"960671de-83ba-4f7e-8ce0-b5905089b714", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"960671de-83ba-4f7e-8ce0-b5905089b714", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"960671de-83ba-4f7e-8ce0-b5905089b714", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c5b32c2a-3c68-4a32-abf1-fe20d14493d8", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"827217e8-150d-4c32-8aee-59a211af56f8", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"86ed5f39-af6a-4788-8659-8058700eef28", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a9e323e4-0d51-464f-915d-e742e233f8b7", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d1371709-a76d-4344-82bb-54209c5885ec", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d1371709-a76d-4344-82bb-54209c5885ec", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b15325e7-7291-4933-be2a-d5cb4de27aa2", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b15325e7-7291-4933-be2a-d5cb4de27aa2", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"13d07a8b-637c-440b-a583-0db87696c7cb", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ae77c55a-ece2-4909-b8a0-2ccab1dc768c", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"08a2b607-1e16-44c0-a492-b655deb22453", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ea31d5e1-99a3-4e26-9e4e-dc4bc4ad759c", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"59c01934-1c44-4b82-ac6b-ec2171fc5d9b", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"59c01934-1c44-4b82-ac6b-ec2171fc5d9b", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"607bf263-6603-4e57-8acb-810bdb84bb05", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"acb7b042-bada-44f9-b009-cf967f6dc973", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"84290e38-e52e-42d6-82d6-e4c036090f0c", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"326c1240-7053-403e-846c-2c3321dd3bbc", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"326c1240-7053-403e-846c-2c3321dd3bbc", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"326c1240-7053-403e-846c-2c3321dd3bbc", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"11dc93cf-8da4-4655-8390-d99d65729d59", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5df3200e-33ad-4b03-ac76-598e3bb17999", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ab177a9d-2c2b-4e98-b79c-ea0deada083b", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"50cf92e4-3345-4ce1-a603-13e272fe9690", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"acdc5aea-ac5c-47dd-9bd2-eef01326293c", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f650fea5-378d-4b8f-acfa-15c25f5aa433", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-jfue-1241-d46666760268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0091d607-d645-40a4-a3cd-07bc2877d971", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4c13-bjdu-776c4656g28a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6496f12a-ee89-4651-8a1b-cc26a714dc18", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"9e2c16ba-accf-4fa8-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"da2b9137-3276-46a6-b0bc-0e86ea688016", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"a18fa209-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d4bff2bf-89f7-47d9-9447-da6c6b30ce3c", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42542cd2-23dd-4851-9966-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"616c5718-8941-402b-a840-89381baf0942", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"3531ceaa-4ed1-4a9f-855a-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b5ace162-ecb7-42bd-aa71-7d64267c4bff", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"465acac0-62fa-4ab2-9f35-b2623b40fbd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"319666fa-1283-4b74-bbd6-137c70459681", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d508af0-008f-4304-b480-4056rdd4bd61", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"4d2db5ee-3b58-49c7-a1c8-3cace2bf8310", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9f06bd7-3edf-48cf-b018-d8630698c8ff", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"add77969-78fe-40e2-952b-7d5c1c1b2416", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e92b674-4bcb-4d07-b476-eec0065bb8a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e6e1045d-d2a7-447a-b6e1-763dd65ec59f", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf6db74b-40c2-4ca1-ab2e-a69df206eabc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ee30c251-0e2b-4b18-ae0b-9c5918ff2b6d", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"b8f0de3c-3d77-4fd6-8659-08c5c2dd5071", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"960671de-83ba-4f7e-8ce0-b5905089b714", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a80e34d-278f-4e74-ab2e-b16b9885fe22", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c5b32c2a-3c68-4a32-abf1-fe20d14493d8", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"6feb3f5e-99b4-4d3e-b961-6dec2359b471", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"827217e8-150d-4c32-8aee-59a211af56f8", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"86ed5f39-af6a-4788-8659-8058700eef28", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"8e84c549-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a9e323e4-0d51-464f-915d-e742e233f8b7", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e30a60f8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d1371709-a76d-4344-82bb-54209c5885ec", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"69f57192-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b15325e7-7291-4933-be2a-d5cb4de27aa2", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"ddd6ef80-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"13d07a8b-637c-440b-a583-0db87696c7cb", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"c4731dd4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ae77c55a-ece2-4909-b8a0-2ccab1dc768c", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"08a2b607-1e16-44c0-a492-b655deb22453", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ea31d5e1-99a3-4e26-9e4e-dc4bc4ad759c", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"59c01934-1c44-4b82-ac6b-ec2171fc5d9b", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"607bf263-6603-4e57-8acb-810bdb84bb05", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"acb7b042-bada-44f9-b009-cf967f6dc973", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"84290e38-e52e-42d6-82d6-e4c036090f0c", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"326c1240-7053-403e-846c-2c3321dd3bbc", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"11dc93cf-8da4-4655-8390-d99d65729d59", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5df3200e-33ad-4b03-ac76-598e3bb17999", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ab177a9d-2c2b-4e98-b79c-ea0deada083b", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"50cf92e4-3345-4ce1-a603-13e272fe9690", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"acdc5aea-ac5c-47dd-9bd2-eef01326293c", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"92180ac8-fd4a-406a-805a-fd270dec4415", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-4787-1241-d42666667608", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dff6e674-ccde-4c93-b45c-6502fd180c90", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4cu13-bjd-776g286c465a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c1c39f20-9453-4bae-8df5-8669325012f2", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"2c16b9ea-accf-4a8f-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7a24a45f-5811-439e-af87-42efc4bc99e1", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"aa218f09-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9a64b7c1-b2eb-4392-80ac-38d2274b32c5", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42cd2542-23dd-4851-9696-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"11b26e45-e999-453e-8e4f-ad05a2fabc29", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-a855-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"11b26e45-e999-453e-8e4f-ad05a2fabc29", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-a855-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"11b26e45-e999-453e-8e4f-ad05a2fabc29", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-a855-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a0355356-3ed4-425f-96bc-0a7fba0396ab", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"46ac05ac-62fa-4ab2-9f35-b2b40f623bd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8c31cf2e-d2f4-445c-8b36-79508522a823", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d8af500-008f-4304-b480-44bd6056rdd1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a6037b55-f197-40fe-aae5-cfe89d54f418", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9df06b7-3edf-48cf-b018-d898c8f6306f", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0aa5a133-fd6b-4658-af8e-3647154e8d29", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e67492b-4bcb-4d07-b476-e5bb8ec006a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0aa5a133-fd6b-4658-af8e-3647154e8d29", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e67492b-4bcb-4d07-b476-e5bb8ec006a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"96225359-c504-42fa-95f9-7e17048f035a", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a206ea69dfbc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"96225359-c504-42fa-95f9-7e17048f035a", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a206ea69dfbc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"96225359-c504-42fa-95f9-7e17048f035a", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a206ea69dfbc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"04a81254-56d9-407d-844d-ae32d2ac56bd", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf0de83c-3d77-4fd6-8659-08dd507c5c21", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"04a81254-56d9-407d-844d-ae32d2ac56bd", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf0de83c-3d77-4fd6-8659-08dd507c5c21", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"88adb7c9-a7b6-4187-b9e1-747eadd18111", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b885fe216b92", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"88adb7c9-a7b6-4187-b9e1-747eadd18111", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b885fe216b92", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"88adb7c9-a7b6-4187-b9e1-747eadd18111", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b885fe216b92", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8ae90609-9c2d-4fe7-9f82-592fdab13c38", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"eb3f6f5e-99b4-4d3e-b961-59b46dec2371", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3231bc26-c30b-485a-af98-057357fd0f83", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"09971cda-372e-4ed9-9e98-9d76e22805da", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"84c54e89-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2edf3465-d1a7-402a-9dda-0c1a84d91d53", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e60f30a8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"649fdeb8-441b-4d37-876c-a7ce2642a5b4", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"61929f57-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"649fdeb8-441b-4d37-876c-a7ce2642a5b4", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"61929f57-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"af253bdf-71b9-4300-8187-463f3e81c800", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"d6ef8dd0-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"af253bdf-71b9-4300-8187-463f3e81c800", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"d6ef8dd0-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ef803039-2570-4cc6-bd7f-ed69f6908e7a", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"31dc47d4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"22012930-7395-4fbb-8738-16f53abb8d5d", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"27e8174b-7043-40f1-a97a-1528d63f8c1d", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5825393c-1c70-4b13-98db-1efb204216c4", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"53929fdd-2f99-4fc7-b37e-c40cf3cb3cda", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"53929fdd-2f99-4fc7-b37e-c40cf3cb3cda", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fcc5f775-8991-43e1-a5de-ab5df0422cf4", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8cd16806-5eed-42e5-9dd6-83f6fc1b1f47", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a2bf111d-1691-4217-988b-2372ab3a3e9a", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7113f798-9458-426a-983c-4ca10891165e", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7113f798-9458-426a-983c-4ca10891165e", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7113f798-9458-426a-983c-4ca10891165e", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9ab6647f-db5d-493d-8730-2b07b3113e68", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"56fb5832-6121-46c6-a89e-541afd0b00ff", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"85f00937-36ee-4434-b512-e4e9287c2ddc", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dd43324d-9343-47d4-858f-af4be671bb33", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"70361dc3-32ec-42f1-b035-a7100bc77024", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Your app will continue, but the messages will be lost forever", "correct"=>true, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will raise an exception and grind to a halt", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"Your app will continue, and the messages will go into the log file", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}, {"answer_text"=>"The SaaS gods will strike you down in a fit of rage", "correct"=>false, "explanation"=>"Printing to the log file would be the right thing to do, but it doesn't happen automatically.  Instead the messages will get silently lost."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"92180ac8-fd4a-406a-805a-fd270dec4415", "question_comment"=>"", "question_text"=>"If you use <tt>puts</tt> or <tt>printf</tt> to print debugging messages in a production app:", "multiple"=>false, "randomize"=>false, "uid"=>"faa7df9c-828b-4787-1241-d42666667608", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"\n<pre>\ndef silly_fortune_1\n  @fortune_text + 'in bed'\nend\n</pre>", "correct"=>true, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_2\n  self.fortune_text + 'in bed'\nend\n</pre>\n", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"\n<pre>\ndef silly_fortune_3\n  fortune_text + 'in bed'\nend\n</pre>", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}, {"answer_text"=>"They will all return a silly fortune", "correct"=>false, "explanation"=>"\nActiveRecord's accessors (getters and setters) do NOT just manipulate instance variables the way <tt>attr_accessor</tt>'s do.  Instead, ActiveRecord's accessors read or set the value that will be persisted to the database, and ActiveRecord has its own internal representations of these values.  Hence we should not assume that <tt>@fortune_text</tt> is a regular Ruby instance variable.  <tt>self.fortune_text</tt> is a synonym for <tt>fortune_text</tt>, since a method call with no explicit receiver assumes a receiver of <tt>self</tt>, whose value in this example is the model instance on which the accessor is called.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dff6e674-ccde-4c93-b45c-6502fd180c90", "question_comment"=>"", "question_text"=>"\nAssume table <tt>fortune_cookies</tt> has column <tt>fortune_text</tt>.\nWhich of these instance methods of <tt>class FortuneCookie < ActiveRecord::Base</tt> will NOT return a silly fortune (if any)?\n", "multiple"=>false, "randomize"=>false, "uid"=>"b72b2e52-b1e3-4cu13-bjd-776g286c465a", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"An object representing a table", "correct"=>true, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing the database", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"An object representing an instance of a model", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}, {"answer_text"=>"It could be anything; not enough information to tell", "correct"=>false, "explanation"=>"\nThis is a good example of trying to infer intent from good variable names and good code structure.  Since we are calling a method <tt>release_date</tt> on <tt>t</tt>, we might ask: on what types of objects might such a method be meaningfully defined?  Certainly not a database, since a database can have many tables, anby one of which might have one or more Datetime columns; nor an instance of a model, for the same reason.  It does, however, make sense if <tt>t</tt> is a table to specify a Datetime column for that particular table.\n"}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c1c39f20-9453-4bae-8df5-8669325012f2", "question_comment"=>"", "question_text"=>"Based on what youâ€™ve seen of Rails, what kind of object is likely being yielded in the migration code:\n<pre>\ndef up\n  create_table 'movies' do |t|\n    t.datetime 'release_date'\n    ...\n  end\nend\n</pre>", "multiple"=>false, "randomize"=>false, "uid"=>"2c16b9ea-accf-4a8f-abbc-b5361jfueb6c", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"will not be updated automatically, but can be updated manually by re-executing <tt>r = Movie.where(\"title='Amelie'\").rating</tt>", "correct"=>true, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because an ActiveRecord model \"connects\" your app to the database", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"will be updated automatically because of ActiveRecord's use of metaprogramming", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}, {"answer_text"=>"May be undefined or implementation-dependent", "correct"=>false, "explanation"=>"The in-memory object retrieved by ActiveRecord is distinct from the database row that stores the persistent version of that object.  ActiveRecord methods like <tt>where</tt> can be used to Create, Read, Update or Delete the database table, but anything that happens to the database \"in between\" calls to those methods is invisible until we \"reload\" the model from the database or save our own changes to the database."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7a24a45f-5811-439e-af87-42efc4bc99e1", "question_comment"=>"", "question_text"=>"Suppose we've executed\n<tt>r = Movie.where(\"title='Amelie'\").rating</tt>\n\nThen another app (not our own) changes the movie's rating in the database table directly.  Just after that instant, the value of <tt>r</tt>:", "multiple"=>false, "randomize"=>false, "uid"=>"aa218f09-2a92-4d87-ad77-0b30fjeud424", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"only (a) and (c)", "correct"=>true, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (c)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}, {"answer_text"=>"only (a) and (b)", "correct"=>false, "explanation"=>"As 'rake routes' on your Rails app shows, different routes can have the same URI as long as they use different HTTP methods.  The route helpers provided by Rails are a convenience, but the browser only cares whether a valid URI is associated with each hyperlink--it doesn't care how the URI was generated."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9a64b7c1-b2eb-4392-80ac-38d2274b32c5", "question_comment"=>"", "question_text"=>"Which statements are TRUE:\na) A route consists of both a URI and an HTTP method\nb)  A route URI MUST be generated by Rails URI helpers\nc) A route URI MAY be generated by Rails URI helpers", "multiple"=>true, "randomize"=>false, "uid"=>"42cd2542-23dd-4851-9696-c2yekf64b131", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>= form_tag movies_path do ... end</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => movies_path, :method => :post}</tt>", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}, {"answer_text"=>"<tt>%form{:action => 'movies', :method => 'post'}", "correct"=>true, "explanation"=>"All that is required by the browser is a <tt><form></tt> tag with an <tt>action</tt> attribute whose value is the submission URI and whose <tt>method</tt> attribute names the HTTP method (GET or POST) for submitting the form.  All three versions of the code above would generate a tag with these attributes and values."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"11b26e45-e999-453e-8e4f-ad05a2fabc29", "question_comment"=>"", "question_text"=>"Which of these would be valid Haml for generating the form that, when submitted, would call the Create New Movie action?", "multiple"=>true, "randomize"=>false, "uid"=>"35ea31ca-4ed1-4a9f-a855-8b997hu569a4", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True - but a bad idea", "correct"=>true, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"True - no problem with this", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because you can't put arbitrary objects into a hash", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}, {"answer_text"=>"False - because <tt>session</tt> isn't really a hash, it just quacks like one", "correct"=>false, "explanation"=>"It is true that you CAN put arbitrary objects into a hash, and in this respect the session hash is no different.  However, the session has to be serialized into an object that can either be stored in the database or passed directly to the client as a cookie, and because of the size limits on such objects, it's best not to stuff a lot of data into the session hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a0355356-3ed4-425f-96bc-0a7fba0396ab", "question_comment"=>"", "question_text"=>"Ben Bitdiddle says: \"You can put arbitrary objects (not just \"simple\" ones like ints and strings) into the <tt>session[]</tt>.\"  What do you think?", "multiple"=>false, "randomize"=>false, "uid"=>"46ac05ac-62fa-4ab2-9f35-b2b40f623bd7", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Only this request: once the view is rendered, the variable is reset to nil", "correct"=>true, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"Only this request and the next request", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}, {"answer_text"=>"This request and the next request, but only if this request ends in a redirect rather than rendering a view", "correct"=>false, "explanation"=>"No matter how the request ends, once it's over, it's over.  The controller instance dedicated to handling this request (and therefore its instance variables) is destroyed once the request finishes."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8c31cf2e-d2f4-445c-8b36-79508522a823", "question_comment"=>"", "question_text"=>"If you set an instance variable in a controller method, for how long will its value be retained?", "multiple"=>false, "randomize"=>false, "uid"=>"0d8af500-008f-4304-b480-44bd6056rdd1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Ensure a route exists in <tt>config/routes.rb</tt>", "correct"=>true, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Ensure there is a template to render in <tt>app/views/movies/foo.html.haml</tt> (or <tt>.html.erb</tt>, etc.)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}, {"answer_text"=>"Implement helper method(s) to generate the necessary route helper URI(s)", "correct"=>false, "explanation"=>"A route is always necessary, although it may already be covered by route helpers such as <tt>resources</tt> that generate multiple routes from a single route declaration.  A template MAY be necessary, but some actions will end with a <tt>redirect_to</tt> instead, so this step is not always necessary.  Similarly, URI helpers are an optional convenience, but the app will work just fine without them."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a6037b55-f197-40fe-aae5-cfe89d54f418", "question_comment"=>"", "question_text"=>"Which steps are ALWAYS required when adding a new action <tt>foo</tt> to the MoviesController?", "multiple"=>true, "randomize"=>false, "uid"=>"d9df06b7-3edf-48cf-b018-d898c8f6306f", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"<tt>movie.update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where(:title => \"Terminator 2\").update_attribute(:title, \"T2\")</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>movie.title = \"T2\"</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0aa5a133-fd6b-4658-af8e-3647154e8d29", "question_comment"=>"", "question_text"=>"\nConsider the following code, and assume the database contains exactly one movie whose title is \"Terminator 2\":\n<pre>\nmovie = Movie.where(:title => \"Terminator 2\")\n__________\nMovie.find(movie.id).title   # => returns \"T2\"\n</pre>\nWhich code snippets below, if used to fill in the blank, would cause <tt>movie.title</tt> to return \"T2\"?", "multiple"=>true, "randomize"=>false, "uid"=>"4e67492b-4bcb-4d07-b476-e5bb8ec006a3", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/event/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/event/new", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"96225359-c504-42fa-95f9-7e17048f035a", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :events</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bfb746db-40c2-4ca1-ab2e-a206ea69dfbc", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/earths", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earths/:id/edit", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/earth", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"/earth/edit", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"04a81254-56d9-407d-844d-ae32d2ac56bd", "question_comment"=>"", "question_text"=>"Which paths does <pre>resources :earth</pre> NOT generate?", "multiple"=>true, "randomize"=>true, "uid"=>"bf0de83c-3d77-4fd6-8659-08dd507c5c21", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/events", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos/:id", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/events/:event_id/photos", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"/photos/:id", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"88adb7c9-a7b6-4187-b9e1-747eadd18111", "question_comment"=>"", "question_text"=>"Which paths does the following generate?\n    <pre>\n    resources :events do\n      resources :photos\n    end\n    </pre>", "multiple"=>true, "randomize"=>true, "uid"=>"7a3480ed-278f-4e74-ab2e-b885fe216b92", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"/route/i", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8ae90609-9c2d-4fe7-9f82-592fdab13c38", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a --- to map the URI.", "order"=>false, "case_sensitive"=>false, "uid"=>"eb3f6f5e-99b4-4d3e-b961-59b46dec2371", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3231bc26-c30b-485a-af98-057357fd0f83", "question_comment"=>"", "question_text"=>"True or False: True or False: As long as you set up the correct routes, you can choose names other than show, create, and so on for the basic CRUD methods in a controller.True", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"Only (a) and (b)", "correct"=>true, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"Only (b)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}, {"answer_text"=>"(a), (b) and (c)", "correct"=>false, "explanation"=>"The action would have the option of reusing an existing view, by either redirecting to it or rendering it explicitly.  But the action definitely needs its own route and controller method."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"09971cda-372e-4ed9-9e98-9d76e22805da", "question_comment"=>"", "question_text"=>"We want to add a new action \"get_recent_movies\" to RottenPotatoes, to list only movies released in the last month.  We MUST create which of the following:  (a) a route, (b) a controller method, (c) a view?", "multiple"=>true, "randomize"=>false, "uid"=>"84c54e89-00e5-4411-8a95-593be760a134", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(?i-mx:controller)", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2edf3465-d1a7-402a-9dda-0c1a84d91d53", "question_comment"=>"", "question_text"=>"Adding a new action to your Rails app requires adding a method to the --- to perform the action itself.", "order"=>false, "case_sensitive"=>false, "uid"=>"e60f30a8-7edc-405f-ab87-485721a1b36a", "question_type"=>"FillIn"}
{"answers"=>[{"answer_text"=>"Makes the message available to whatever view is rendered for this action", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persists the message until the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Writes a message to the log", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"649fdeb8-441b-4d37-876c-a7ce2642a5b4", "question_comment"=>"", "question_text"=>"What does line 4 do in the following code?\n<pre>\n1 class PostsController < ActionController::Base\n2   def add_post\n3     # ...code to create new blog post...\n4     flash[:notice] = \"Post added successfully\"\n5     redirect_to posts_url\n6   end\n7 end\n</pre>", "multiple"=>true, "randomize"=>false, "uid"=>"61929f57-5d2c-4283-a913-f2298023e395", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Cookies", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"The session[] hash", "correct"=>true, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Instance variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}, {"answer_text"=>"Class variables set by a controller method", "correct"=>false, "explanation"=>"All Ruby variables associated with the controller, whether instance or class, are created anew on every request."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"af253bdf-71b9-4300-8187-463f3e81c800", "question_comment"=>"", "question_text"=>"Which of the following can be used to store state ACROSS requests from the same user?", "multiple"=>true, "randomize"=>true, "uid"=>"d6ef8dd0-a9c2-481a-bf4a-a11d9375b32d", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"This request and the next request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request only", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ef803039-2570-4cc6-bd7f-ed69f6908e7a", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"31dc47d4-dd31-41fb-aece-47aea3ebd2d0", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"22012930-7395-4fbb-8738-16f53abb8d5d", "question_comment"=>"", "question_text"=>"If a controller action assigns a value to <tt>flash.now[:notice]</tt>, that value is accessible to a view during:", "multiple"=>false, "randomize"=>false, "uid"=>"3ff28a97-5d26-4b8b-8b1e-c406ff6d46d5", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"This request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"This request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"This request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"27e8174b-7043-40f1-a97a-1528d63f8c1d", "question_comment"=>"", "question_text"=>"If a submitted form populates <tt>params['movie']['title']</tt> with user-entered values, those values are accessible to the controller action during:", "multiple"=>false, "randomize"=>false, "uid"=>"d595e46c-dad8-439a-82ab-9476f2104268", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Views rendered for this request only", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and the next request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Views rendered for this request and all subsequent requests", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5825393c-1c70-4b13-98db-1efb204216c4", "question_comment"=>"", "question_text"=>"If a controller action sets an instance variable, the instance variable's value is accessible to:", "multiple"=>false, "randomize"=>false, "uid"=>"89958708-243f-4474-8931-0c3680817084", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>params[]</tt>", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"controller instance variables", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"53929fdd-2f99-4fc7-b37e-c40cf3cb3cda", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing user-entered information FROM the view TO the controller?", "multiple"=>true, "randomize"=>false, "uid"=>"1d076bfc-2892-4b28-b8a2-8c2a93339964", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"controller instance variables", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>params[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"routes", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>session[]</tt>", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>flash[]</tt>", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fcc5f775-8991-43e1-a5de-ab5df0422cf4", "question_comment"=>"", "question_text"=>"Which Rails features facilitate passing model information FROM the controller TO the view?", "multiple"=>true, "randomize"=>false, "uid"=>"41027bf1-bf9f-4cae-975c-59b6eb42c357", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"because <tt>movies_path</tt> refers to a whole collection of resources\n              rather than a single resource, whereas the other two refer\n              to a single resource and so need an argument to  specify\n              which resource", "correct"=>true, "explanation"=>"To edit or show details of a movie, a RESTful URI must specify which\n    one, so the helpers take an ActiveRecord model object and encode its\n    ID into the URI.  To list all movies, the URI need not include any\n    movie ID."}, {"answer_text"=>"because the latter is a class method but the former two are instance methods", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"because the argument to <tt>movies_path</tt> is supplied implicitly via\n              convention-over-configuration", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8cd16806-5eed-42e5-9dd6-83f6fc1b1f47", "question_comment"=>"", "question_text"=>"Why do the RESTful URI helpers <tt>edit_movie_path</tt> and\n  <tt>movie_path</tt> require an argument, whereas the helper <tt>movies_path</tt>\n  requires no argument?  Check all that apply:", "multiple"=>true, "randomize"=>false, "uid"=>"8e0112f0-9bf0-4363-8b80-9b987388423a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"\"NC-17\" will be printed", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"\"X\" will be printed", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed after <tt>save!</tt>, because 'X' is not a valid rating", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"An error message will be printed when <tt>make_adult</tt> is called, because ActiveRecord attributes can't be modified directly", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a2bf111d-1691-4217-988b-2372ab3a3e9a", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"R\", what will be printed by the following code:\n<pre>\nclass Movie < ActiveRecord::Base\n  def make_adult\n    @rating = 'X'\n  end\nend\n\nm = Movie.find_by_title(\"Carrie\")\nm.make_adult\nm.save!\n\nputs Movie.find_by_title(\"Carrie\").rating\n</pre>\n", "multiple"=>false, "randomize"=>true, "uid"=>"8297b156-b6c6-4b8d-8c16-07a85785a20e", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>Movie.find_by_name('Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>Movie.where('name = :name', :name => 'Carrie').update_attributes!(:rating => 'R')", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>h = {:rating => 'R'} ; Movie.where('name = \"Carrie\"').update_attributes!(h)</tt>", "correct"=>true, "explanation"=>"The argument of <tt>update_attributes</tt> is just a hash, so it's fine to assign it to a variable instead of passing it using poetry mode."}, {"answer_text"=>"<tt>m = Movie.find_by_name('Carrie') ; m.rating = 'R'</tt>", "correct"=>false, "explanation"=>"The database isn't updated until we call <tt>save</tt> or <tt>save!</tt>"}, {"answer_text"=>"<tt>Movie.find_all_by_name('Carrie').update_attributes!(:rating => 'R')</tt>", "correct"=>false, "explanation"=>"<tt>find_all_by_*</tt> return an enumerable collection, not a single object, so we can't call <tt>update_attributes!</tt> on it."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7113f798-9458-426a-983c-4ca10891165e", "question_comment"=>"", "question_text"=>"Given a <tt>movies</tt> table with columns for <tt>title</tt> and <tt>rating</tt>, and containing a row for the movie \"Carrie\" with the rating \"NC-17\", which of the following expressions will change the in-database copy to have the rating \"R\"?  (Assume <tt>Movie</tt> inherits from <tt>ActiveRecord::Base</tt> as usual.)", "multiple"=>true, "randomize"=>false, "uid"=>"3d4fd6db-6ba1-48b9-ba65-30b60995e58a", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i) and (ii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9ab6647f-db5d-493d-8730-2b07b3113e68", "question_comment"=>"", "question_text"=>"Consider the following model: \n  \t\n  \t<pre>\n  \t# == Schema Information\n    #\n    # Table name: events\n    #\n    #  created_at       :datetime         not null\n    #  description      :text\n    #  id               :integer          not null, primary key\n    #  location         :string(255)\n    #  name             :string(255)\n    #  rsvp_count       :integer\n    #  updated_at       :datetime         not null\n    #\n  \tclass Event < ActiveRecord::Base\n      attr_accessible :description, :name, :location\n      validates :name, :description, :presence => true\n  \tend\n  \t</pre>\n  \t\n  \tWhich of the following will properly add a new entry to the database?\n  \t\n  \t(i)\n  \t<pre>\n\t\t  calapalooza = Event.new(:name => 'Calapalooza', :rsvp_count => 2, :location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n\t\t  calapalooza.save\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tcalapalooza = Event.new\n  \t\tcalapalooza.name = 'Calapalooza'\n  \t\tcalapalooza.location = 'Upper Sproul'\n  \t\tcalapalooza.description = 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.'\n  \t\tcalapalooza.save\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tcalapalooza = Event.new(:location => 'Upper Sproul', :description => 'Calapalooza is Berkeley's annual new student activity fair, the heart of your Welcome experience.')\n  \t\tcalapalooza.rsvp_count = 2\n  \t\tcalapalooza.save\n  \t</pre>", "multiple"=>true, "randomize"=>true, "uid"=>"8ef3b306-4ee9-4740-b520-575514857e24", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"(i) and (ii)", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"(i) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(ii) and (iii)", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"(i), (ii), and (iii)", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"56fb5832-6121-46c6-a89e-541afd0b00ff", "question_comment"=>"", "question_text"=>"Consider the following sets of code: \n  \t(i)\n  \t<pre>\n  \t\tbatman_begins = Movie.create(:title => 'Batman Begins', :release_date => '6/15/2005', :rating => 'PG-13')\n  \t</pre>\n\t\n  \t(ii)\n  \t<pre>\n  \t\tdark_knight = Movie.new\n  \t\tdark_knight.title = 'The Dark Knight'\n  \t\tdark_knight.release_date = '7/18/2008'\n  \t\tdark_knight.rating = 'PG-13'\n  \t\tdark_knight.save!\n  \t</pre>\n\t\n  \t(iii)\n  \t<pre>\n  \t\tdark_knight_rises = Movie.create\n  \t\tdark_knight_rises.title = 'The Dark Knight Rises'\n  \t\tdark_knight_rises.release_date = '7/20/2012'\n  \t\tdark_knight_rises.rating = 'PG-13'\n  \t</pre>\n  \tWhich of the following will properly add a new movie entry to the database ?", "multiple"=>true, "randomize"=>true, "uid"=>"94ffa433-f92f-49bf-8f45-55f47f5895c8", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"True", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"False", "correct"=>false, "explanation"=>""}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"85f00937-36ee-4434-b512-e4e9287c2ddc", "question_comment"=>"", "question_text"=>"True or False: True or False: You cannot call a model method from a view.False", "question_type"=>"TrueFalse"}
{"answers"=>[{"answer_text"=>"params['title']", "correct"=>true, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session['title']", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"session.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"params.title", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}, {"answer_text"=>"All of the above", "correct"=>false, "explanation"=>"Form parameters always get put into <tt>params</tt>, which quacks like a hash."}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"dd43324d-9343-47d4-858f-af4be671bb33", "question_comment"=>"", "question_text"=>"A user submits a new movie form. How would the associated controller access the title of the movie?", "multiple"=>false, "randomize"=>false, "uid"=>"27c3d8a8-c714-4049-9376-6085df654ad1", "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"<tt>redirect_to</tt> results in generating a new HTTP request", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> results in generating a new HTTP request", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>render</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"<tt>redirect_to</tt> immediately aborts the current action", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>true, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"70361dc3-32ec-42f1-b035-a7100bc77024", "question_comment"=>"", "question_text"=>"Which statements are TRUE regarding render and redirect_to?", "multiple"=>true, "randomize"=>true, "uid"=>"f5beede2-4119-423f-a71d-cd1f74a9ae03", "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ad565b54-a9c8-4575-b3c3-6ddeda775729", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ad565b54-a9c8-4575-b3c3-6ddeda775729", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"35a73fa5-a76f-4da2-812d-41fd60f8321b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"35a73fa5-a76f-4da2-812d-41fd60f8321b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1df13d76-691e-46eb-a8b8-f4a8de8ae5b2", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1df13d76-691e-46eb-a8b8-f4a8de8ae5b2", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"64f61707-ac25-42e5-9dad-fb4e23d67c24", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"80", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag"], "question_uid"=>"39a0d3d1-9ab7-457c-be75-116136937e13", "question_comment"=>"", "question_text"=>"The implied port number of the URI <tt>http://google.com</tt> is", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag", "test_tag2"], "question_uid"=>"e6f75065-71c9-4d0b-8793-d11ebcb1afab", "question_comment"=>"", "question_text"=>"Which tiers in the three-tier architecture are involved in handling views?", "multiple"=>true, "randomize"=>true, "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Logic", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag", "test_tag2"], "question_uid"=>"e6f75065-71c9-4d0b-8793-d11ebcb1afab", "question_comment"=>"", "question_text"=>"Which tiers in the three-tier architecture are involved in handling views?", "multiple"=>true, "randomize"=>true, "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag2"], "question_uid"=>"14124a15-29f2-41c5-8717-07a49b1f0c6c", "question_comment"=>"", "question_text"=>"The ----- tier of three-tier SaaS apps is the most complicated to scale.", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"CRUD action, database", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"header, cookie", "correct"=>false, "explanation"=>"A header is part of the request, but a cookie is not necessarily included unless the server previously specified one."}, {"answer_text"=>"URL, wildcard", "correct"=>false, "explanation"=>"A URL is necessary, but not a wildcard."}, {"answer_text"=>"URI, HTTP request method", "correct"=>true, "explanation"=>"The URI alone isn't enough--the same URI used with two different methods can cause two different actions."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b2a77b56-ab8a-4154-bfe2-b8c27be27986", "question_comment"=>"", "question_text"=>"An HTTP request must consist of both a(n) ----- and a(n) -----", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"64f61707-ac25-42e5-9dad-fb4e23d67c24", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"80", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"400", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"3000", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"8000", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag"], "question_uid"=>"39a0d3d1-9ab7-457c-be75-116136937e13", "question_comment"=>"", "question_text"=>"The implied port number of the URI <tt>http://google.com</tt> is", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Logic", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persistence", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Database", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag", "test_tag2"], "question_uid"=>"e6f75065-71c9-4d0b-8793-d11ebcb1afab", "question_comment"=>"", "question_text"=>"Which tiers in the three-tier architecture are involved in handling views?", "multiple"=>true, "randomize"=>true, "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Logic", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Persistence", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Database", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag2"], "question_uid"=>"14124a15-29f2-41c5-8717-07a49b1f0c6c", "question_comment"=>"", "question_text"=>"The ----- tier of three-tier SaaS apps is the most complicated to scale.", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"CRUD action, database", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"header, cookie", "correct"=>false, "explanation"=>"A header is part of the request, but a cookie is not necessarily included unless the server previously specified one."}, {"answer_text"=>"URL, wildcard", "correct"=>false, "explanation"=>"A URL is necessary, but not a wildcard."}, {"answer_text"=>"URI, HTTP request method", "correct"=>true, "explanation"=>"The URI alone isn't enough--the same URI used with two different methods can cause two different actions."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b2a77b56-ab8a-4154-bfe2-b8c27be27986", "question_comment"=>"", "question_text"=>"An HTTP request must consist of both a(n) ----- and a(n) -----", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3af73f32-90e1-4d50-950f-91d9a5dc1767", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"80", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag"], "question_uid"=>"03ee81d2-9c94-467d-8551-1e0f7e4b1219", "question_comment"=>"", "question_text"=>"The implied port number of the URI <tt>http://google.com</tt> is", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag", "test_tag2"], "question_uid"=>"41c0d188-9066-4b7a-8605-811384c81edc", "question_comment"=>"", "question_text"=>"Which tiers in the three-tier architecture are involved in handling views?", "multiple"=>true, "randomize"=>true, "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Logic", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag", "test_tag2"], "question_uid"=>"41c0d188-9066-4b7a-8605-811384c81edc", "question_comment"=>"", "question_text"=>"Which tiers in the three-tier architecture are involved in handling views?", "multiple"=>true, "randomize"=>true, "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag2"], "question_uid"=>"22eac910-0f48-4bc9-804a-956874ffbb20", "question_comment"=>"", "question_text"=>"The ----- tier of three-tier SaaS apps is the most complicated to scale.", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"CRUD action, database", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"header, cookie", "correct"=>false, "explanation"=>"A header is part of the request, but a cookie is not necessarily included unless the server previously specified one."}, {"answer_text"=>"URL, wildcard", "correct"=>false, "explanation"=>"A URL is necessary, but not a wildcard."}, {"answer_text"=>"URI, HTTP request method", "correct"=>true, "explanation"=>"The URI alone isn't enough--the same URI used with two different methods can cause two different actions."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"096aaf1a-71d8-44e9-a4ae-0c1971d77746", "question_comment"=>"", "question_text"=>"An HTTP request must consist of both a(n) ----- and a(n) -----", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"3af73f32-90e1-4d50-950f-91d9a5dc1767", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"80", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"400", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"3000", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"8000", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag"], "question_uid"=>"03ee81d2-9c94-467d-8551-1e0f7e4b1219", "question_comment"=>"", "question_text"=>"The implied port number of the URI <tt>http://google.com</tt> is", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Logic", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persistence", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Database", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag", "test_tag2"], "question_uid"=>"41c0d188-9066-4b7a-8605-811384c81edc", "question_comment"=>"", "question_text"=>"Which tiers in the three-tier architecture are involved in handling views?", "multiple"=>true, "randomize"=>true, "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Logic", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Persistence", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Database", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag2"], "question_uid"=>"22eac910-0f48-4bc9-804a-956874ffbb20", "question_comment"=>"", "question_text"=>"The ----- tier of three-tier SaaS apps is the most complicated to scale.", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"CRUD action, database", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"header, cookie", "correct"=>false, "explanation"=>"A header is part of the request, but a cookie is not necessarily included unless the server previously specified one."}, {"answer_text"=>"URL, wildcard", "correct"=>false, "explanation"=>"A URL is necessary, but not a wildcard."}, {"answer_text"=>"URI, HTTP request method", "correct"=>true, "explanation"=>"The URI alone isn't enough--the same URI used with two different methods can cause two different actions."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"096aaf1a-71d8-44e9-a4ae-0c1971d77746", "question_comment"=>"", "question_text"=>"An HTTP request must consist of both a(n) ----- and a(n) -----", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8575ac2a-43f0-4f45-b8ac-167ef3b9787e", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"80", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag"], "question_uid"=>"6f376c64-c5b6-446f-9294-f1a06e2a8475", "question_comment"=>"", "question_text"=>"The implied port number of the URI <tt>http://google.com</tt> is", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag", "test_tag2"], "question_uid"=>"2cf9ef0f-d151-4405-82e3-179165e9e5de", "question_comment"=>"", "question_text"=>"Which tiers in the three-tier architecture are involved in handling views?", "multiple"=>true, "randomize"=>true, "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Logic", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag", "test_tag2"], "question_uid"=>"2cf9ef0f-d151-4405-82e3-179165e9e5de", "question_comment"=>"", "question_text"=>"Which tiers in the three-tier architecture are involved in handling views?", "multiple"=>true, "randomize"=>true, "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag2"], "question_uid"=>"2142caad-b195-4298-b9de-3c9f45681cfd", "question_comment"=>"", "question_text"=>"The ----- tier of three-tier SaaS apps is the most complicated to scale.", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"CRUD action, database", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"header, cookie", "correct"=>false, "explanation"=>"A header is part of the request, but a cookie is not necessarily included unless the server previously specified one."}, {"answer_text"=>"URL, wildcard", "correct"=>false, "explanation"=>"A URL is necessary, but not a wildcard."}, {"answer_text"=>"URI, HTTP request method", "correct"=>true, "explanation"=>"The URI alone isn't enough--the same URI used with two different methods can cause two different actions."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"eab64138-ec00-4070-b8aa-d0bc8ebc5457", "question_comment"=>"", "question_text"=>"An HTTP request must consist of both a(n) ----- and a(n) -----", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8575ac2a-43f0-4f45-b8ac-167ef3b9787e", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"80", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"400", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"3000", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"8000", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag"], "question_uid"=>"6f376c64-c5b6-446f-9294-f1a06e2a8475", "question_comment"=>"", "question_text"=>"The implied port number of the URI <tt>http://google.com</tt> is", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Logic", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Persistence", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Database", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag", "test_tag2"], "question_uid"=>"2cf9ef0f-d151-4405-82e3-179165e9e5de", "question_comment"=>"", "question_text"=>"Which tiers in the three-tier architecture are involved in handling views?", "multiple"=>true, "randomize"=>true, "question_type"=>"SelectMultiple"}
{"answers"=>[{"answer_text"=>"Presentation", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"Logic", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Persistence", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"Database", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>["test_tag2"], "question_uid"=>"2142caad-b195-4298-b9de-3c9f45681cfd", "question_comment"=>"", "question_text"=>"The ----- tier of three-tier SaaS apps is the most complicated to scale.", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"CRUD action, database", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"header, cookie", "correct"=>false, "explanation"=>"A header is part of the request, but a cookie is not necessarily included unless the server previously specified one."}, {"answer_text"=>"URL, wildcard", "correct"=>false, "explanation"=>"A URL is necessary, but not a wildcard."}, {"answer_text"=>"URI, HTTP request method", "correct"=>true, "explanation"=>"The URI alone isn't enough--the same URI used with two different methods can cause two different actions."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"eab64138-ec00-4070-b8aa-d0bc8ebc5457", "question_comment"=>"", "question_text"=>"An HTTP request must consist of both a(n) ----- and a(n) -----", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7e6e8a62-e989-4ad4-b547-bd8e9798b7ae", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"7e6e8a62-e989-4ad4-b547-bd8e9798b7ae", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cd78fa26-daf1-4ae3-970e-6b46b92bfb47", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cd78fa26-daf1-4ae3-970e-6b46b92bfb47", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8e6a757f-baaa-457c-b22e-de65eb47046b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8e6a757f-baaa-457c-b22e-de65eb47046b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d4abec5e-ed41-4232-8d55-4dc323c63628", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d4abec5e-ed41-4232-8d55-4dc323c63628", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b95cbe71-5504-48e8-918b-693944c98a91", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b95cbe71-5504-48e8-918b-693944c98a91", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"394434aa-434f-4d80-8b31-0d8f626a3441", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"394434aa-434f-4d80-8b31-0d8f626a3441", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fac35320-9a81-4724-991b-f6f7b7516e42", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fac35320-9a81-4724-991b-f6f7b7516e42", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a84fca42-813e-46c2-bc80-4534a99796ff", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a84fca42-813e-46c2-bc80-4534a99796ff", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"02da5c10-864f-4cc8-a524-eb2716b38d6a", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"02da5c10-864f-4cc8-a524-eb2716b38d6a", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"907cb777-0bd4-4865-813f-bf5ba1725058", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"907cb777-0bd4-4865-813f-bf5ba1725058", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e1c9622e-663c-4911-9d5d-bd8a320276c3", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e1c9622e-663c-4911-9d5d-bd8a320276c3", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b420a781-4689-4538-ba25-034418ca92c1", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b420a781-4689-4538-ba25-034418ca92c1", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"44fa6005-1aac-4818-b80d-77d2467b9d2d", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"44fa6005-1aac-4818-b80d-77d2467b9d2d", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ca860b6d-9ddd-4e63-b182-ab9869af5847", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ca860b6d-9ddd-4e63-b182-ab9869af5847", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ef72ec63-014f-43f6-9832-abf31f1675be", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ef72ec63-014f-43f6-9832-abf31f1675be", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"00e81f1a-1685-40f5-acac-9bf03d84b81e", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"00e81f1a-1685-40f5-acac-9bf03d84b81e", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"53a19206-fbd1-44c7-b157-2576aa1a7fd6", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"53a19206-fbd1-44c7-b157-2576aa1a7fd6", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c8375911-e3a3-4d57-b3b8-01ee291adfb7", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c8375911-e3a3-4d57-b3b8-01ee291adfb7", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c614ad74-47eb-4481-8be9-b69e7d2f0298", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c614ad74-47eb-4481-8be9-b69e7d2f0298", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8f24f504-7eea-4818-a3af-3a21a7f4ff83", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8f24f504-7eea-4818-a3af-3a21a7f4ff83", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"10b9fee5-5785-48b1-8643-0cbba349f023", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"10b9fee5-5785-48b1-8643-0cbba349f023", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f54cc231-afef-4eb2-a07a-7129a45a7f75", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f54cc231-afef-4eb2-a07a-7129a45a7f75", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f292fe04-2c4d-41b7-856c-1fd9b3decdbe", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f292fe04-2c4d-41b7-856c-1fd9b3decdbe", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2a1c811d-c2f2-48b6-a317-f8c555be0d8e", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"2a1c811d-c2f2-48b6-a317-f8c555be0d8e", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ebd3befc-2cca-44e1-8553-c2f0352f5bc6", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ebd3befc-2cca-44e1-8553-c2f0352f5bc6", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"20ae6895-9e37-4eaa-8e1d-7e009dbac528", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"20ae6895-9e37-4eaa-8e1d-7e009dbac528", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d47c000e-6a60-4fb7-907c-681c77dae54e", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d47c000e-6a60-4fb7-907c-681c77dae54e", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8e0f9ccd-5e41-4272-9e02-a48f0192cff9", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8e0f9ccd-5e41-4272-9e02-a48f0192cff9", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"63a80513-135d-4891-8990-3b1fa1546296", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"63a80513-135d-4891-8990-3b1fa1546296", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a369b7f2-fb18-4b4b-9f4a-75b9d26405e2", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a369b7f2-fb18-4b4b-9f4a-75b9d26405e2", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"09d791f3-d58a-4e16-9a22-c82d6f2e3829", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"09d791f3-d58a-4e16-9a22-c82d6f2e3829", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c62189c4-b84f-419f-9f8b-3d1ef64a3d52", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c62189c4-b84f-419f-9f8b-3d1ef64a3d52", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ab31dc98-cc37-4a5e-801e-bac4b211fc1b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"ab31dc98-cc37-4a5e-801e-bac4b211fc1b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5c4773b2-50d4-407d-994f-e5b0891aca8b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5c4773b2-50d4-407d-994f-e5b0891aca8b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"71bad0e2-7cab-42af-8f35-66bec1428f99", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"71bad0e2-7cab-42af-8f35-66bec1428f99", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"730e9115-25e1-4ecf-ac86-75b59e5e3078", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"730e9115-25e1-4ecf-ac86-75b59e5e3078", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b9191e51-41ef-4322-80c2-46ae9589d995", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b9191e51-41ef-4322-80c2-46ae9589d995", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1e294d46-448a-4d89-83f7-3bfc2fc6db69", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"1e294d46-448a-4d89-83f7-3bfc2fc6db69", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"45dadc53-8d22-4750-8bd7-d8f85add99a6", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"45dadc53-8d22-4750-8bd7-d8f85add99a6", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e44361dc-5576-4e49-af86-67feca889b3e", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e44361dc-5576-4e49-af86-67feca889b3e", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0d48a2d4-6f3e-4901-a194-e78488f96b4c", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"0d48a2d4-6f3e-4901-a194-e78488f96b4c", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f69f142e-bd7d-423c-963b-44555a37def4", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"f69f142e-bd7d-423c-963b-44555a37def4", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"80160868-7e98-4074-888d-3a045984ce44", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"80160868-7e98-4074-888d-3a045984ce44", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"eaba00ea-f439-42d7-947f-96e766d41b9f", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"eaba00ea-f439-42d7-947f-96e766d41b9f", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fe4d2a70-da8e-4d89-a961-53febf9ad03f", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fe4d2a70-da8e-4d89-a961-53febf9ad03f", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cc52fdf2-841c-4ca4-9bb1-845058258c0c", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cc52fdf2-841c-4ca4-9bb1-845058258c0c", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"85802d6b-37e7-49e0-b965-1acade02e87b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"85802d6b-37e7-49e0-b965-1acade02e87b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a787ef7a-7d5c-4015-9787-deef656dc6fd", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a787ef7a-7d5c-4015-9787-deef656dc6fd", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a0897be2-4e60-4fb9-b6f9-9daf5a514dbe", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a0897be2-4e60-4fb9-b6f9-9daf5a514dbe", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"73147f9b-9be1-4fe3-be5c-8bf66936f858", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"73147f9b-9be1-4fe3-be5c-8bf66936f858", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c70f8ced-09bf-4ce5-b615-13d77fb0cae5", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"c70f8ced-09bf-4ce5-b615-13d77fb0cae5", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d7c0f752-b54f-4085-b8a1-1657a4261a0b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"d7c0f752-b54f-4085-b8a1-1657a4261a0b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fd2ad0a1-cd46-48d8-bce8-5e4b12afa14c", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"fd2ad0a1-cd46-48d8-bce8-5e4b12afa14c", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e63c0dd5-1587-4637-9a7c-da6ec5c2be00", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"e63c0dd5-1587-4637-9a7c-da6ec5c2be00", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8868f325-28d3-412d-b076-68308e817c8b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8868f325-28d3-412d-b076-68308e817c8b", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"564857f3-fc51-4527-8108-a64a4027ea19", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"564857f3-fc51-4527-8108-a64a4027ea19", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5f38122b-8f1e-4fbc-b320-70fcffc984e7", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5f38122b-8f1e-4fbc-b320-70fcffc984e7", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"41e34f3d-ef85-4e90-b57c-224523af1e82", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"41e34f3d-ef85-4e90-b57c-224523af1e82", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8a7efbf6-3bbb-4dd2-8cec-5e14fe4a4498", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"8a7efbf6-3bbb-4dd2-8cec-5e14fe4a4498", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a69b7942-f6b6-493e-8704-06f8ffbd0b41", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"a69b7942-f6b6-493e-8704-06f8ffbd0b41", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5839d6c2-4f42-491d-9d78-e1dcd598d71f", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"B", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"C", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"D", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"5839d6c2-4f42-491d-9d78-e1dcd598d71f", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"44475020-bb09-47c0-8dd9-33b30c325fb4", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"44475020-bb09-47c0-8dd9-33b30c325fb4", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b5d355d5-bb8b-4195-81e5-e22e1a0128bb", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"B", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"C", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"D", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"b5d355d5-bb8b-4195-81e5-e22e1a0128bb", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cb282c33-6485-4389-b592-348f538457f5", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"cb282c33-6485-4389-b592-348f538457f5", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"45cafe65-8d18-4b18-b370-ba7558bb2987", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"B", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"C", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"D", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"45cafe65-8d18-4b18-b370-ba7558bb2987", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6fc5c8ae-563f-47cb-9e6f-0836be1da4a8", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6fc5c8ae-563f-47cb-9e6f-0836be1da4a8", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"edf9e328-7b48-4599-bd4f-4ede9e851ce0", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"B", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"C", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"D", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"edf9e328-7b48-4599-bd4f-4ede9e851ce0", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"07899dd3-b1d2-4fb6-8d5a-fcded0b95851", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"07899dd3-b1d2-4fb6-8d5a-fcded0b95851", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9a9276d0-62d2-4aa5-be67-8f6ae0dd33d3", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"B", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"C", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"D", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9a9276d0-62d2-4aa5-be67-8f6ae0dd33d3", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9f5d5683-af6f-4ee7-9fa3-bb1958ae1f16", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"HTTP", "correct"=>false, "explanation"=>"HTTP stands for HyperText Transfer Protocol, which is used to transfer SaaS content to browsers."}, {"answer_text"=>"Get, Put, Post, Delete", "correct"=>false, "explanation"=>"These are four of the methods or \"verbs\" used by HTTP."}, {"answer_text"=>"CRUD", "correct"=>true, "explanation"=>"Create, Read, Update, Delete are the four basic database operations commonly performed by SaaS apps."}, {"answer_text"=>"REST", "correct"=>false, "explanation"=>"REpresentational State Transfer is a design approach for making SaaS requests self-contained by having each request refer to a resource and an operation on that resource."}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"9f5d5683-af6f-4ee7-9fa3-bb1958ae1f16", "question_comment"=>"", "question_text"=>"Which of the following best identifies the four basic operations supported by RDBMS?", "multiple"=>false, "randomize"=>true, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6678d88d-97e2-489c-9c77-2ce2b37ded92", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
{"answers"=>[{"answer_text"=>"A", "correct"=>true, "explanation"=>nil}, {"answer_text"=>"B", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"C", "correct"=>false, "explanation"=>nil}, {"answer_text"=>"D", "correct"=>false, "explanation"=>nil}], "points"=>1, "raw"=>nil, "global_explanation"=>nil, "name"=>nil, "question_image"=>nil, "question_tags"=>[], "question_uid"=>"6678d88d-97e2-489c-9c77-2ce2b37ded92", "question_comment"=>"", "question_text"=>"The quick brown fox jumped over the lazy dog", "multiple"=>false, "randomize"=>false, "question_type"=>"MultipleChoice"}
